/* @autogenerated */
import { Component, OnDestroy, OnInit, Signal, signal } from '@angular/core';
import { NavigationEnd, Router, RouterOutlet } from '@angular/router';
import { TranslocoModule, TranslocoService } from '@jsverse/transloco';
import { AppStateService } from '@common/context/state/app-state.service';
import { LayoutStateService } from './bootstrap/layout/container/service/layout-state.service';
import { menu } from './bootstrap/menu.config';
import { InstrumentationService } from '@common/context/observability/instrumentation.service';
import { filter, Subscription, take } from 'rxjs';
import { IdentityService } from '@common/context/identity/identity.service';
import { MenuItem } from './bootstrap/layout/container/model/menu-item.model';
import { UserInfo } from '@common/context/identity/user-info.model';
import { toSignal } from '@angular/core/rxjs-interop';
import { MatMenuModule } from '@angular/material/menu';
import { MatIconModule } from '@angular/material/icon';
import { CommonModule } from '@angular/common';
import { MenuComponent } from './bootstrap/layout/menu/components/menu/menu.component';
import { MatButtonModule } from '@angular/material/button';
import { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, TranslocoModule, MatMenuModule, MatIconModule, CommonModule, MenuComponent, MatButtonModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss',
})
export class AppComponent implements OnInit, OnDestroy {
  currentUser: Signal<UserInfo | undefined>;
  currentMenu: Signal<MenuItem[] | undefined>;

  mobile = signal(false);

  visibleMenu = false;
  menuStyle = 'full';
  bootstrap = false;

  private susbcription = new Subscription();

  constructor(
    transloco: TranslocoService,
    appState: AppStateService,
    instrumentation: InstrumentationService,
    layoutState: LayoutStateService,
    private readonly router: Router,
    private readonly identity: IdentityService,
    private readonly breakpoint: BreakpointObserver,
  ) {
    instrumentation.activate();
    this.currentUser = toSignal(appState.userInfo['main']);
    this.currentMenu = toSignal(layoutState.menu);

    appState.language.subscribe((lang) => {
      transloco.setActiveLang(lang);
    });
    layoutState.menu.set(menu());
  }

  ngOnInit(): void {
    this.susbcription.add(
      this.identity
        .bootstrap('main')
        .pipe(take(1))
        .subscribe((_) => {
          this.bootstrap = true;
        }),
    );
    this.susbcription.add(
      this.breakpoint.observe([Breakpoints.XSmall]).subscribe((result) => {
        this.visibleMenu = false;
        this.mobile.set(result.matches);
      }),
    );
    this.susbcription.add(
      this.router.events.pipe(filter((e) => e instanceof NavigationEnd)).subscribe((event) => {
        this.visibleMenu = false;
      }),
    );
  }

  ngOnDestroy(): void {
    this.susbcription.unsubscribe();
  }

  public toogleMenu() {
    this.visibleMenu = !this.visibleMenu;
    if (!this.mobile()) {
      if (this.menuStyle === 'full') {
        this.menuStyle = 'mini';
      } else if (this.menuStyle === 'mini') {
        this.menuStyle = 'hide';
      } else {
        this.menuStyle = 'full';
      }
    } else {
      this.menuStyle = 'full';
    }
  }

  public login(): void {
    this.identity.login('main');
  }

  public logout(): void {
    this.identity.logout('main');
  }
}
