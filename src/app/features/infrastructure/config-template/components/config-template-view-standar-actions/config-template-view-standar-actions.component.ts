/* @autogenerated */
import { AbstactContainerWrapper } from 'app/common/toolkit/action/abstract-container-wrapper';
import { ConfigTemplateProjection } from 'app/features/infrastructure/config-template/model/config-template.model';
import { ConfigTemplateRepository } from 'app/features/infrastructure/config-template/repository/config-template-repository.service';
import { ItemMapper, ActionContainerComponent } from 'app/common/toolkit/action/action-container.component';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { input, computed, effect, viewChild, Component } from '@angular/core';

@Component({
  standalone: false,
  selector: 'config-template-view-standar-actions',
  templateUrl: './config-template-view-standar-actions.component.html',
  styleUrl: './config-template-view-standar-actions.component.scss',
})
export class ConfigTemplateViewStandarActionsComponent extends AbstactContainerWrapper {
  override actions = viewChild<ActionContainerComponent>('container');
  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();

  activated: Tick<ConfigTemplateProjection, string>;
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;

  mapper: ItemMapper<any>;

  constructor(public readonly repository: ConfigTemplateRepository) {
    super();
    this.acl = this.repository.acl();
    this.activated = this.repository.projection([]);
    this.mapper = {
      display: (item: any) => {
        return item.uid;
      },
      load: (code: string) => {
        this.acl.fetch(code);
        this.activated.fetch(code);
        return this.activated;
      },
    };
    effect(() => {
      const selected = this.actions()?.selectionModel.selected();
      if (!selected || selected.length == 0) {
        this.acl.reset();
        this.activated.reset();
      }
    });
  }
}
