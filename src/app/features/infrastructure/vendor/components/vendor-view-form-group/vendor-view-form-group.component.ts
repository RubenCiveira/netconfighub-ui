/* @autogenerated */
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { Vendor } from 'app/features/infrastructure/vendor/model/vendor.model';
import { Validators, FormGroup, FormControl } from '@angular/forms';
import { VendorRepository } from 'app/features/infrastructure/vendor/repository/vendor-repository.service';
import { effect, computed, Component } from '@angular/core';

@Component({
  selector: 'vendor-view-form-group',
  templateUrl: './vendor-view-form-group.component.html',
  styleUrls: ['./vendor-view-form-group.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(VendorViewFormGroupComponent),
  standalone: false,
})
export class VendorViewFormGroupComponent extends SubFormEditable<Vendor> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  public constructor(vendorRepository: VendorRepository) {
    super(
      new FormGroup({
        uid: new FormControl<string>(''),
        name: new FormControl<string>('', [Validators.required]),
        version: new FormControl<number>(0),
      }),
    );
    this.acl = vendorRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.defaultValues = () => {
      return {
        uid: '',
        name: '',
        version: 0,
      };
    };
  }
}
