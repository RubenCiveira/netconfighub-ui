/* @autogenerated */
import { TypeProjection } from '@features/infrastructure/type/model/type.model';
import { VendorProjection } from '@features/infrastructure/vendor/model/vendor.model';
import { Signal } from '@angular/core';

export interface Model {
  uid: string;
  name: string;
  vendor: { $ref: string } | null;
  type: { $ref: string } | null;
  version?: number;
}
export interface ModelFilter {
  search?: string;
  uids?: string[];
  limit?: number;
  order?: string;
  name?: string;
  vendor?: string[];
  vendors?: string[];
  type?: string[];
  types?: string[];
}
export interface ModelProjection {
  uid: string;
  name: string;
  vendor: Signal<VendorProjection | null>;
  type: Signal<TypeProjection | null>;
  version?: number;
}
export function modelProjectionToValue(proyection: Model | ModelProjection | null | undefined): Model | null {
  const valueOfVendor = typeof proyection?.vendor == 'function' ? proyection?.vendor()?.uid : proyection?.vendor?.$ref;
  const valueOfType = typeof proyection?.type == 'function' ? proyection?.type()?.uid : proyection?.type?.$ref;
  return proyection
    ? {
        uid: proyection.uid,
        name: proyection.name,
        vendor: valueOfVendor ? { $ref: valueOfVendor } : null,
        type: valueOfType ? { $ref: valueOfType } : null,
        version: proyection.version,
      }
    : null;
}
