/* @autogenerated */
import { Query } from 'appwrite';
import { ModelFilter } from '../model/model.model';
import { Observable, of } from 'rxjs';
export function appwriteQuery(query: ModelFilter): Observable<string[]> {
  const constraints: string[] = [];
  if (query.name) {
    constraints.push(Query.equal('name', query.name as any));
  }
  if (query.vendor) {
    constraints.push(Query.equal('vendor', query.vendor as any));
  }
  if (query.vendors) {
    const isArray = Array.isArray(query.vendors);
    if (isArray && query.vendors?.length > 1) {
      const every: string[] = [];
      query.vendors.forEach((val) => every.push(Query.equal('vendor', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('vendor', query.vendors[0]));
    } else if (typeof query.vendors === 'string') {
      constraints.push(Query.equal('vendor', query.vendors as any));
    }
  }
  if (query.type) {
    constraints.push(Query.equal('type', query.type as any));
  }
  if (query.types) {
    const isArray = Array.isArray(query.types);
    if (isArray && query.types?.length > 1) {
      const every: string[] = [];
      query.types.forEach((val) => every.push(Query.equal('type', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('type', query.types[0]));
    } else if (typeof query.types === 'string') {
      constraints.push(Query.equal('type', query.types as any));
    }
  }
  return of(constraints);
}
