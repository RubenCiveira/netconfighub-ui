/* @autogenerated */
import { ModelFilter, ModelProjection } from 'app/features/infrastructure/model/model/model.model';
import { ModelRepository } from 'app/features/infrastructure/model/repository/model-repository.service';
import { FormControl } from '@angular/forms';
import { Shift } from '@common/data/repository/repository.model';
import { input, effect, Component } from '@angular/core';

@Component({
  selector: 'model-view-list',
  templateUrl: './model-view-list.component.html',
  styleUrls: ['./model-view-list.component.scss'],
  standalone: false,
})
export class ModelViewListComponent {
  filters = input<ModelFilter>();
  actionName = input<string>('model');
  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();
  search = new FormControl<any>(undefined);
  list: Shift<ModelProjection[], ModelFilter>;

  constructor(repository: ModelRepository) {
    this.list = repository.projections(['vendor', 'type']);
    effect(() => {
      setTimeout(() => this.makeSearch());
    });
  }
  makeSearch() {
    const result = { limit: 10 } as any;
    const filter = this.search.value;
    const external = this.filters();
    if (external?.search) {
      result.search = external.search;
    }
    if (external?.name) {
      result.name = external.name;
    }
    if (external?.vendor) {
      result.vendor = external.vendor;
    }
    if (external?.vendors) {
      result.vendors = external.vendors;
    }
    if (external?.type) {
      result.type = external.type;
    }
    if (external?.types) {
      result.types = external.types;
    }
    if (filter?.search) {
      result.search = filter.search;
    }
    if (filter?.name) {
      result.name = filter.name;
    }
    if (filter?.vendor?.$ref) {
      result.vendor = filter.vendor.$ref;
    }
    if (filter?.vendors?.$ref) {
      result.vendors = filter.vendors.$ref;
    }
    if (filter?.type?.$ref) {
      result.type = filter.type.$ref;
    }
    if (filter?.types?.$ref) {
      result.types = filter.types.$ref;
    }
    if (filter?.order) {
      result.order = filter.order;
    }
    this.list.fetch(result);
  }

  next() {
    this.list.next();
  }

  reload() {
    this.list.reset();
  }

  prev() {
    console.log('PREV');
  }
}
