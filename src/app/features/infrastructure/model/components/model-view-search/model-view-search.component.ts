/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { ModelRepository } from 'app/features/infrastructure/model/repository/model-repository.service';
import { Vendor, VendorFilter } from 'app/features/infrastructure/vendor/model/vendor.model';
import { Model } from 'app/features/infrastructure/model/model/model.model';
import { TypeRepository } from 'app/features/infrastructure/type/repository/type-repository.service';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { FormGroup, FormControl } from '@angular/forms';
import { VendorRepository } from 'app/features/infrastructure/vendor/repository/vendor-repository.service';
import { effect, computed, Component, input } from '@angular/core';
import { Type, TypeFilter } from 'app/features/infrastructure/type/model/type.model';

@Component({
  selector: 'model-view-search',
  templateUrl: './model-view-search.component.html',
  styleUrls: ['./model-view-search.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(ModelViewSearchComponent),
  standalone: false,
})
export class ModelViewSearchComponent extends SubFormEditable<any> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  typesProvider: SelectorProvider<Type, { $ref: string }>;
  typesFilter = input<TypeFilter>({ limit: 100 });
  vendorProvider: SelectorProvider<Vendor, { $ref: string }>;
  vendorFilter = input<VendorFilter>({ limit: 100 });
  typeProvider: SelectorProvider<Type, { $ref: string }>;
  typeFilter = input<TypeFilter>({ limit: 100 });
  vendorsProvider: SelectorProvider<Vendor, { $ref: string }>;
  vendorsFilter = input<VendorFilter>({ limit: 100 });
  public constructor(
    modelRepository: ModelRepository,
    typeRepository: TypeRepository,
    vendorRepository: VendorRepository,
  ) {
    super(
      new FormGroup({
        search: new FormControl<string>(''),
        types: new FormControl<any>(null),
        vendor: new FormControl<any>(null),
        name: new FormControl<string>(''),
        type: new FormControl<any>(null),
        vendors: new FormControl<any>(null),
        order: new FormControl<string>(''),
      }),
    );
    this.acl = modelRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.typesProvider = typeRepository.selectorProvider(this.typesFilter);
    this.vendorProvider = vendorRepository.selectorProvider(this.vendorFilter);
    this.typeProvider = typeRepository.selectorProvider(this.typeFilter);
    this.vendorsProvider = vendorRepository.selectorProvider(this.vendorsFilter);
    this.defaultValues = () => {
      return {
        search: '',
        types: null,
        vendor: null,
        name: '',
        type: null,
        vendors: null,
        order: '',
      };
    };
  }
}
