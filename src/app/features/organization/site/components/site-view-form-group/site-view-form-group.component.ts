/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { SiteRepository } from 'app/features/organization/site/repository/site-repository.service';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { Client, ClientFilter } from 'app/features/organization/client/model/client.model';
import { ClientRepository } from 'app/features/organization/client/repository/client-repository.service';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { Validators, FormGroup, FormControl } from '@angular/forms';
import { Site } from 'app/features/organization/site/model/site.model';
import { effect, computed, Component, input } from '@angular/core';

@Component({
  selector: 'site-view-form-group',
  templateUrl: './site-view-form-group.component.html',
  styleUrls: ['./site-view-form-group.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(SiteViewFormGroupComponent),
  standalone: false,
})
export class SiteViewFormGroupComponent extends SubFormEditable<Site> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  clientProvider: SelectorProvider<Client, { $ref: string }>;
  clientFilter = input<ClientFilter>({ limit: 100 });
  public constructor(siteRepository: SiteRepository, clientRepository: ClientRepository) {
    super(
      new FormGroup({
        uid: new FormControl<string>(''),
        client: new FormControl<any>(null, [Validators.required]),
        name: new FormControl<string>('', [Validators.required]),
        address: new FormControl<string>(''),
        version: new FormControl<number>(0),
      }),
    );
    this.acl = siteRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.clientProvider = clientRepository.selectorProvider(this.clientFilter);
    this.defaultValues = () => {
      return {
        uid: '',
        client: null,
        name: '',
        address: '',
        version: 0,
      };
    };
  }
}
