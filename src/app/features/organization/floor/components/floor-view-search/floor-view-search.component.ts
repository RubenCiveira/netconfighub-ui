/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { SiteRepository } from 'app/features/organization/site/repository/site-repository.service';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { FormGroup, FormControl } from '@angular/forms';
import { Site, SiteFilter } from 'app/features/organization/site/model/site.model';
import { effect, computed, Component, input } from '@angular/core';
import { Floor } from 'app/features/organization/floor/model/floor.model';
import { FloorRepository } from 'app/features/organization/floor/repository/floor-repository.service';

@Component({
  selector: 'floor-view-search',
  templateUrl: './floor-view-search.component.html',
  styleUrls: ['./floor-view-search.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(FloorViewSearchComponent),
  standalone: false,
})
export class FloorViewSearchComponent extends SubFormEditable<any> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  siteProvider: SelectorProvider<Site, { $ref: string }>;
  siteFilter = input<SiteFilter>({ limit: 100 });
  sitesProvider: SelectorProvider<Site, { $ref: string }>;
  sitesFilter = input<SiteFilter>({ limit: 100 });
  public constructor(floorRepository: FloorRepository, siteRepository: SiteRepository) {
    super(
      new FormGroup({
        search: new FormControl<string>(''),
        site: new FormControl<any>(null),
        name: new FormControl<string>(''),
        sites: new FormControl<any>(null),
        order: new FormControl<string>(''),
      }),
    );
    this.acl = floorRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.siteProvider = siteRepository.selectorProvider(this.siteFilter);
    this.sitesProvider = siteRepository.selectorProvider(this.sitesFilter);
    this.defaultValues = () => {
      return {
        search: '',
        site: null,
        name: '',
        sites: null,
        order: '',
      };
    };
  }
}
