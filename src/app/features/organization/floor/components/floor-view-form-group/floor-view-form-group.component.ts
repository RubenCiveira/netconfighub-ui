/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { SiteRepository } from 'app/features/organization/site/repository/site-repository.service';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { Site, SiteFilter } from 'app/features/organization/site/model/site.model';
import { FloorRepository } from 'app/features/organization/floor/repository/floor-repository.service';
import { DownloadBlob } from '@common/data/repository/provider/repository-provider.interface';
import { Observable } from 'rxjs';
import { UploadProgress } from 'app/common/data/repository/provider/repository-provider.interface';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { Validators, FormGroup, FormControl } from '@angular/forms';
import { effect, computed, Component, input } from '@angular/core';
import { Floor } from 'app/features/organization/floor/model/floor.model';

@Component({
  selector: 'floor-view-form-group',
  templateUrl: './floor-view-form-group.component.html',
  styleUrls: ['./floor-view-form-group.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(FloorViewFormGroupComponent),
  standalone: false,
})
export class FloorViewFormGroupComponent extends SubFormEditable<Floor> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  siteProvider: SelectorProvider<Site, { $ref: string }>;
  siteFilter = input<SiteFilter>({ limit: 100 });
  uploadImagePath: (file: File) => Observable<UploadProgress>;
  downloadImagePath: (url?: string) => null | Observable<DownloadBlob>;
  public constructor(floorRepository: FloorRepository, siteRepository: SiteRepository) {
    super(
      new FormGroup({
        uid: new FormControl<string>(''),
        name: new FormControl<string>('', [Validators.required]),
        site: new FormControl<any>(null, [Validators.required]),
        imagePath: new FormControl<string>('', [Validators.required]),
        version: new FormControl<number>(0),
      }),
    );
    this.acl = floorRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.siteProvider = siteRepository.selectorProvider(this.siteFilter);
    this.uploadImagePath = (file) => floorRepository.storeImagePath(file);
    this.downloadImagePath = (url) => floorRepository.downloadImagePath(url);
    this.defaultValues = () => {
      return {
        uid: '',
        name: '',
        site: null,
        imagePath: '',
        version: 0,
      };
    };
  }
}
