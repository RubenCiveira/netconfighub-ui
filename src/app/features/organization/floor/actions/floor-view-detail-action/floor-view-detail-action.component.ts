/* @autogenerated */
import { TranslocoService } from '@jsverse/transloco';
import { ActionContainerComponent } from 'app/common/toolkit/action/action-container.component';
import { Action } from 'app/common/toolkit/action/action.model';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { FormControl } from '@angular/forms';
import { computed, input, viewChild, Component, signal, TemplateRef } from '@angular/core';
import { FloorRepository } from 'app/features/organization/floor/repository/floor-repository.service';
import { Floor } from 'app/features/organization/floor/model/floor.model';

@Component({
  selector: 'floor-view-detail-action',
  standalone: false,
  templateUrl: './floor-view-detail-action.component.html',
  styleUrl: './floor-view-detail-action.component.scss',
})
export class FloorViewDetailActionComponent implements Action {
  readonly name = 'detail';
  readonly contextual = true;
  readonly multiple = false;
  container = signal<ActionContainerComponent | undefined>(undefined);
  selection = signal<any[]>([]);
  render = viewChild<TemplateRef<any>>('formTemplate');

  title = signal<string>('Detalle del item');
  label = signal<string>('Detalle');
  icon = signal<string>('preview');
  tooltip = signal<string>('Muestra el detalle del elemento seleccionado');
  default = input<boolean>(false);

  visibleValue = signal(false);
  enabledValue = signal(true);

  constructor(transloco: TranslocoService) {
    transloco.selectTranslateObject('action.detail', {}, 'organization/floor').subscribe((val) => {
      if (val.label) {
        this.label.set(val.label);
      }
      if (val.tooltip) {
        this.tooltip.set(val.tooltip);
      }
      if (val.icon) {
        this.icon.set(val.icon);
      }
      if (val.title) {
        this.title.set(val.title);
      }
    });
  }

  visible(items: any[]) {
    return this.visibleValue;
  }

  enabled(items: any[]) {
    return this.enabledValue;
  }
  run(): void {}
  private allowed(allow: Acl | undefined) {
    return !!allow?.allows?.find((info) => info.name == 'retrieve')?.allowed;
  }
}
