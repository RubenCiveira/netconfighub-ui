/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { ProjectDeviceRepository } from 'app/features/installations/project-device/repository/project-device-repository.service';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { ModelRepository } from 'app/features/infrastructure/model/repository/model-repository.service';
import { DeviceInstance } from 'app/features/installations/device-instance/model/device-instance.model';
import { DownloadBlob } from '@common/data/repository/provider/repository-provider.interface';
import { DeviceInstanceRepository } from 'app/features/installations/device-instance/repository/device-instance-repository.service';
import { Model, ModelFilter } from 'app/features/infrastructure/model/model/model.model';
import { Observable } from 'rxjs';
import {
  ProjectDevice,
  ProjectDeviceFilter,
} from 'app/features/installations/project-device/model/project-device.model';
import { UploadProgress } from 'app/common/data/repository/provider/repository-provider.interface';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { Validators, FormGroup, FormControl } from '@angular/forms';
import { effect, computed, Component, input } from '@angular/core';

@Component({
  selector: 'device-instance-view-form-group',
  templateUrl: './device-instance-view-form-group.component.html',
  styleUrls: ['./device-instance-view-form-group.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(DeviceInstanceViewFormGroupComponent),
  standalone: false,
})
export class DeviceInstanceViewFormGroupComponent extends SubFormEditable<DeviceInstance> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  projectDeviceProvider: SelectorProvider<ProjectDevice, { $ref: string }>;
  projectDeviceFilter = input<ProjectDeviceFilter>({ limit: 100 });
  modelProvider: SelectorProvider<Model, { $ref: string }>;
  modelFilter = input<ModelFilter>({ limit: 100 });
  uploadModelPhoto: (file: File) => Observable<UploadProgress>;
  downloadModelPhoto: (url?: string) => null | Observable<DownloadBlob>;
  uploadSerialNumberPhoto: (file: File) => Observable<UploadProgress>;
  downloadSerialNumberPhoto: (url?: string) => null | Observable<DownloadBlob>;
  uploadPlacementPhoto: (file: File) => Observable<UploadProgress>;
  downloadPlacementPhoto: (url?: string) => null | Observable<DownloadBlob>;
  public constructor(
    deviceInstanceRepository: DeviceInstanceRepository,
    projectDeviceRepository: ProjectDeviceRepository,
    modelRepository: ModelRepository,
  ) {
    super(
      new FormGroup({
        uid: new FormControl<string>(''),
        projectDevice: new FormControl<any>(null, [Validators.required]),
        model: new FormControl<any>(null, [Validators.required]),
        serialNumber: new FormControl<string>('', [Validators.required]),
        modelPhoto: new FormControl<string>(''),
        serialNumberPhoto: new FormControl<string>(''),
        placementPhoto: new FormControl<string>(''),
        installedAt: new FormControl<Date>(new Date(), [Validators.required]),
        installedBy: new FormControl<string>('', [Validators.required]),
        version: new FormControl<number>(0),
      }),
    );
    this.acl = deviceInstanceRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.projectDeviceProvider = projectDeviceRepository.selectorProvider(this.projectDeviceFilter);
    this.modelProvider = modelRepository.selectorProvider(this.modelFilter);
    this.uploadModelPhoto = (file) => deviceInstanceRepository.storeModelPhoto(file);
    this.downloadModelPhoto = (url) => deviceInstanceRepository.downloadModelPhoto(url);
    this.uploadSerialNumberPhoto = (file) => deviceInstanceRepository.storeSerialNumberPhoto(file);
    this.downloadSerialNumberPhoto = (url) => deviceInstanceRepository.downloadSerialNumberPhoto(url);
    this.uploadPlacementPhoto = (file) => deviceInstanceRepository.storePlacementPhoto(file);
    this.downloadPlacementPhoto = (url) => deviceInstanceRepository.downloadPlacementPhoto(url);
    this.defaultValues = () => {
      return {
        uid: '',
        projectDevice: null,
        model: null,
        serialNumber: '',
        modelPhoto: '',
        serialNumberPhoto: '',
        placementPhoto: '',
        installedAt: new Date(),
        installedBy: '',
        version: 0,
      };
    };
  }
}
