/* @autogenerated */
import { DeviceInstanceRepository } from 'app/features/installations/device-instance/repository/device-instance-repository.service';
import { DisplayProvider } from '@common/data/display-provider';
import { FormControl } from '@angular/forms';
import {
  DeviceInstanceProjection,
  DeviceInstanceFilter,
} from 'app/features/installations/device-instance/model/device-instance.model';
import { Shift } from '@common/data/repository/repository.model';
import { input, effect, Component } from '@angular/core';

@Component({
  selector: 'device-instance-view-list',
  templateUrl: './device-instance-view-list.component.html',
  styleUrls: ['./device-instance-view-list.component.scss'],
  standalone: false,
})
export class DeviceInstanceViewListComponent {
  filters = input<DeviceInstanceFilter>();
  actionName = input<string>('device-instance');
  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();
  search = new FormControl<any>(undefined);
  list: Shift<DeviceInstanceProjection[], DeviceInstanceFilter>;
  displayer: DisplayProvider<any>;

  constructor(repository: DeviceInstanceRepository) {
    this.displayer = repository.displayProvider();
    this.list = repository.projections(['projectDevice', 'model']);
    effect(() => {
      setTimeout(() => this.makeSearch());
    });
  }
  makeSearch() {
    const result = { limit: 10 } as any;
    const filter = this.search.value;
    const external = this.filters();
    if (external?.search) {
      result.search = external.search;
    }
    if (external?.serialNumber) {
      result.serialNumber = external.serialNumber;
    }
    if (external?.projectDevice) {
      result.projectDevice = external.projectDevice;
    }
    if (external?.projectDevices) {
      result.projectDevices = external.projectDevices;
    }
    if (external?.model) {
      result.model = external.model;
    }
    if (external?.models) {
      result.models = external.models;
    }
    if (filter?.search) {
      result.search = filter.search;
    }
    if (filter?.serialNumber) {
      result.serialNumber = filter.serialNumber;
    }
    if (filter?.projectDevice?.$ref) {
      result.projectDevice = filter.projectDevice.$ref;
    }
    if (filter?.projectDevices?.$ref) {
      result.projectDevices = filter.projectDevices.$ref;
    }
    if (filter?.model?.$ref) {
      result.model = filter.model.$ref;
    }
    if (filter?.models?.$ref) {
      result.models = filter.models.$ref;
    }
    if (filter?.order) {
      result.order = filter.order;
    }
    this.list.fetch(result);
  }

  next() {
    this.list.next();
  }

  reload() {
    this.list.reset();
  }

  prev() {
    console.log('PREV');
  }
}
