/* @autogenerated */
import { TranslocoService } from '@jsverse/transloco';
import { DeviceInstanceRepository } from 'app/features/installations/device-instance/repository/device-instance-repository.service';
import { ActionContainerComponent } from 'app/common/toolkit/action/action-container.component';
import { Action } from 'app/common/toolkit/action/action.model';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { DeviceInstance } from 'app/features/installations/device-instance/model/device-instance.model';
import { FormControl } from '@angular/forms';
import { computed, input, viewChild, Component, signal, TemplateRef } from '@angular/core';

@Component({
  selector: 'device-instance-view-create-action',
  standalone: false,
  templateUrl: './device-instance-view-create-action.component.html',
  styleUrl: './device-instance-view-create-action.component.scss',
})
export class DeviceInstanceViewCreateActionComponent implements Action {
  readonly name = 'create';
  readonly contextual = false;
  readonly multiple = false;
  container = signal<ActionContainerComponent | undefined>(undefined);
  selection = signal<any[]>([]);
  render = viewChild<TemplateRef<any>>('formTemplate');

  title = signal<string>('Creando nuevo device instance');
  label = signal<string>('Crear');
  icon = signal<string>('add');
  tooltip = signal<string>('Crea un nuevo item');
  default = input<boolean>(false);

  visibleValue = signal(false);
  enabledValue = signal(true);

  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();
  fixedProperties = computed(() => Object.keys(this.fixed() || {}));
  hiddenProperties = computed(() => Object.keys(this.hidden() || {}));
  definedProperties = computed(() => {
    return { ...(this.hidden() || {}), ...(this.fixed() || {}) };
  });
  form = new FormControl<DeviceInstance | undefined>(undefined);
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  constructor(
    private readonly repository: DeviceInstanceRepository,
    transloco: TranslocoService,
  ) {
    this.acl = repository.acl();
    this.acl.fetch(null).subscribe((info) => {
      this.visibleValue.set(this.allowed(info?.generic));
    });
    transloco.selectTranslateObject('action.create', {}, 'installations/device-instance').subscribe((val) => {
      if (val.label) {
        this.label.set(val.label);
      }
      if (val.tooltip) {
        this.tooltip.set(val.tooltip);
      }
      if (val.icon) {
        this.icon.set(val.icon);
      }
      if (val.title) {
        this.title.set(val.title);
      }
    });
  }

  visible(items: any[]) {
    return this.visibleValue;
  }

  enabled(items: any[]) {
    return this.enabledValue;
  }
  run(): void {
    this.form.patchValue({} as DeviceInstance);
  }
  save() {
    const value = this.form.value;
    if (!value) {
      throw Error('Unable to save without value');
    }
    this.repository.add(value).subscribe(() => this.container()?.close());
  }
  private allowed(allow: Acl | undefined) {
    return !!allow?.allows?.find((info) => info.name == 'create')?.allowed;
  }
}
