/* @autogenerated */
import { Query } from 'appwrite';
import { DeviceInstanceFilter } from '../model/device-instance.model';
import { Observable, of } from 'rxjs';
export function appwriteQuery(query: DeviceInstanceFilter): Observable<string[]> {
  const constraints: string[] = [];
  if (query.serialNumber) {
    constraints.push(Query.equal('serialNumber', query.serialNumber as any));
  }
  if (query.projectDevice) {
    constraints.push(Query.equal('projectDevice', query.projectDevice as any));
  }
  if (query.projectDevices) {
    const isArray = Array.isArray(query.projectDevices);
    if (isArray && query.projectDevices?.length > 1) {
      const every: string[] = [];
      query.projectDevices.forEach((val) => every.push(Query.equal('projectDevice', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('projectDevice', query.projectDevices[0]));
    } else if (typeof query.projectDevices === 'string') {
      constraints.push(Query.equal('projectDevice', query.projectDevices as any));
    }
  }
  if (query.model) {
    constraints.push(Query.equal('model', query.model as any));
  }
  if (query.models) {
    const isArray = Array.isArray(query.models);
    if (isArray && query.models?.length > 1) {
      const every: string[] = [];
      query.models.forEach((val) => every.push(Query.equal('model', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('model', query.models[0]));
    } else if (typeof query.models === 'string') {
      constraints.push(Query.equal('model', query.models as any));
    }
  }
  return of(constraints);
}
