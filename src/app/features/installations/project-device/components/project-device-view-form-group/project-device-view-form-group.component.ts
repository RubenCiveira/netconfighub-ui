/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { ConfigTemplateRepository } from 'app/features/infrastructure/config-template/repository/config-template-repository.service';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { ProjectDeviceRepository } from 'app/features/installations/project-device/repository/project-device-repository.service';
import { ProjectRepository } from 'app/features/installations/project/repository/project-repository.service';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import { Project, ProjectFilter } from 'app/features/installations/project/model/project.model';
import { ModelRepository } from 'app/features/infrastructure/model/repository/model-repository.service';
import { FloorRepository } from 'app/features/organization/floor/repository/floor-repository.service';
import {
  ConfigTemplate,
  ConfigTemplateFilter,
} from 'app/features/infrastructure/config-template/model/config-template.model';
import { TypeRepository } from 'app/features/infrastructure/type/repository/type-repository.service';
import { Model, ModelFilter } from 'app/features/infrastructure/model/model/model.model';
import { ProjectDevice } from 'app/features/installations/project-device/model/project-device.model';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { Validators, FormGroup, FormControl } from '@angular/forms';
import { effect, computed, Component, input } from '@angular/core';
import { Floor, FloorFilter } from 'app/features/organization/floor/model/floor.model';
import { Type, TypeFilter } from 'app/features/infrastructure/type/model/type.model';

@Component({
  selector: 'project-device-view-form-group',
  templateUrl: './project-device-view-form-group.component.html',
  styleUrls: ['./project-device-view-form-group.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(ProjectDeviceViewFormGroupComponent),
  standalone: false,
})
export class ProjectDeviceViewFormGroupComponent extends SubFormEditable<ProjectDevice> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  projectProvider: SelectorProvider<Project, { $ref: string }>;
  projectFilter = input<ProjectFilter>({ limit: 100 });
  floorProvider: SelectorProvider<Floor, { $ref: string }>;
  floorFilter = input<FloorFilter>({ limit: 100 });
  typeProvider: SelectorProvider<Type, { $ref: string }>;
  typeFilter = input<TypeFilter>({ limit: 100 });
  modelProvider: SelectorProvider<Model, { $ref: string }>;
  modelFilter = input<ModelFilter>({ limit: 100 });
  configTemplateProvider: SelectorProvider<ConfigTemplate, { $ref: string }>;
  configTemplateFilter = input<ConfigTemplateFilter>({ limit: 100 });
  public constructor(
    projectDeviceRepository: ProjectDeviceRepository,
    projectRepository: ProjectRepository,
    floorRepository: FloorRepository,
    typeRepository: TypeRepository,
    modelRepository: ModelRepository,
    configTemplateRepository: ConfigTemplateRepository,
  ) {
    super(
      new FormGroup({
        uid: new FormControl<string>(''),
        name: new FormControl<string>('', [Validators.required]),
        project: new FormControl<any>(null, [Validators.required]),
        floor: new FormControl<any>(null),
        type: new FormControl<any>(null, [Validators.required]),
        model: new FormControl<any>(null),
        configTemplate: new FormControl<any>(null),
        posX: new FormControl<number>(0),
        posY: new FormControl<number>(0),
        version: new FormControl<number>(0),
      }),
    );
    this.acl = projectDeviceRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.projectProvider = projectRepository.selectorProvider(this.projectFilter);
    this.floorProvider = floorRepository.selectorProvider(this.floorFilter);
    this.typeProvider = typeRepository.selectorProvider(this.typeFilter);
    this.modelProvider = modelRepository.selectorProvider(this.modelFilter);
    this.configTemplateProvider = configTemplateRepository.selectorProvider(this.configTemplateFilter);
    this.defaultValues = () => {
      return {
        uid: '',
        name: '',
        project: null,
        floor: null,
        type: null,
        model: null,
        configTemplate: null,
        posX: 0,
        posY: 0,
        version: 0,
      };
    };
  }
}
