/* @autogenerated */
import { DisplayProvider } from '@common/data/display-provider';
import { ProjectDeviceRepository } from 'app/features/installations/project-device/repository/project-device-repository.service';
import {
  ProjectDeviceFilter,
  ProjectDeviceProjection,
} from 'app/features/installations/project-device/model/project-device.model';
import { FormControl } from '@angular/forms';
import { Shift } from '@common/data/repository/repository.model';
import { input, effect, Component } from '@angular/core';

@Component({
  selector: 'project-device-view-list',
  templateUrl: './project-device-view-list.component.html',
  styleUrls: ['./project-device-view-list.component.scss'],
  standalone: false,
})
export class ProjectDeviceViewListComponent {
  filters = input<ProjectDeviceFilter>();
  actionName = input<string>('project-device');
  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();
  search = new FormControl<any>(undefined);
  list: Shift<ProjectDeviceProjection[], ProjectDeviceFilter>;
  displayer: DisplayProvider<any>;

  constructor(repository: ProjectDeviceRepository) {
    this.displayer = repository.displayProvider();
    this.list = repository.projections(['project', 'floor', 'type', 'model', 'configTemplate']);
    effect(() => {
      setTimeout(() => this.makeSearch());
    });
  }
  makeSearch() {
    const result = { limit: 10 } as any;
    const filter = this.search.value;
    const external = this.filters();
    if (external?.search) {
      result.search = external.search;
    }
    if (external?.name) {
      result.name = external.name;
    }
    if (external?.project) {
      result.project = external.project;
    }
    if (external?.projects) {
      result.projects = external.projects;
    }
    if (external?.floor) {
      result.floor = external.floor;
    }
    if (external?.floors) {
      result.floors = external.floors;
    }
    if (external?.type) {
      result.type = external.type;
    }
    if (external?.types) {
      result.types = external.types;
    }
    if (external?.model) {
      result.model = external.model;
    }
    if (external?.models) {
      result.models = external.models;
    }
    if (external?.configTemplate) {
      result.configTemplate = external.configTemplate;
    }
    if (external?.configTemplates) {
      result.configTemplates = external.configTemplates;
    }
    if (filter?.search) {
      result.search = filter.search;
    }
    if (filter?.name) {
      result.name = filter.name;
    }
    if (filter?.project?.$ref) {
      result.project = filter.project.$ref;
    }
    if (filter?.projects?.$ref) {
      result.projects = filter.projects.$ref;
    }
    if (filter?.floor?.$ref) {
      result.floor = filter.floor.$ref;
    }
    if (filter?.floors?.$ref) {
      result.floors = filter.floors.$ref;
    }
    if (filter?.type?.$ref) {
      result.type = filter.type.$ref;
    }
    if (filter?.types?.$ref) {
      result.types = filter.types.$ref;
    }
    if (filter?.model?.$ref) {
      result.model = filter.model.$ref;
    }
    if (filter?.models?.$ref) {
      result.models = filter.models.$ref;
    }
    if (filter?.configTemplate?.$ref) {
      result.configTemplate = filter.configTemplate.$ref;
    }
    if (filter?.configTemplates?.$ref) {
      result.configTemplates = filter.configTemplates.$ref;
    }
    if (filter?.order) {
      result.order = filter.order;
    }
    this.list.fetch(result);
  }

  next() {
    this.list.next();
  }

  reload() {
    this.list.reset();
  }

  prev() {
    console.log('PREV');
  }
}
