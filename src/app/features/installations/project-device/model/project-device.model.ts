/* @autogenerated */
import { ModelProjection } from '@features/infrastructure/model/model/model.model';
import { ProjectProjection } from '@features/installations/project/model/project.model';
import { ConfigTemplateProjection } from '@features/infrastructure/config-template/model/config-template.model';
import { TypeProjection } from '@features/infrastructure/type/model/type.model';
import { FloorProjection } from '@features/organization/floor/model/floor.model';
import { Signal } from '@angular/core';

export interface ProjectDevice {
  uid: string;
  name: string;
  project: { $ref: string } | null;
  floor: { $ref: string } | null;
  type: { $ref: string } | null;
  model: { $ref: string } | null;
  configTemplate: { $ref: string } | null;
  posX?: number;
  posY?: number;
  version?: number;
}
export interface ProjectDeviceFilter {
  search?: string;
  uids?: string[];
  limit?: number;
  order?: string;
  name?: string;
  project?: string[];
  projects?: string[];
  floor?: string[];
  floors?: string[];
  type?: string[];
  types?: string[];
  model?: string[];
  models?: string[];
  configTemplate?: string[];
  configTemplates?: string[];
}
export interface ProjectDeviceProjection {
  uid: string;
  name: string;
  project: Signal<ProjectProjection | null>;
  floor: Signal<FloorProjection | null>;
  type: Signal<TypeProjection | null>;
  model: Signal<ModelProjection | null>;
  configTemplate: Signal<ConfigTemplateProjection | null>;
  posX?: number;
  posY?: number;
  version?: number;
}
export function projectDeviceProjectionToValue(
  proyection: ProjectDevice | ProjectDeviceProjection | null | undefined,
): ProjectDevice | null {
  const valueOfProject =
    typeof proyection?.project == 'function' ? proyection?.project()?.uid : proyection?.project?.$ref;
  const valueOfFloor = typeof proyection?.floor == 'function' ? proyection?.floor()?.uid : proyection?.floor?.$ref;
  const valueOfType = typeof proyection?.type == 'function' ? proyection?.type()?.uid : proyection?.type?.$ref;
  const valueOfModel = typeof proyection?.model == 'function' ? proyection?.model()?.uid : proyection?.model?.$ref;
  const valueOfConfigTemplate =
    typeof proyection?.configTemplate == 'function'
      ? proyection?.configTemplate()?.uid
      : proyection?.configTemplate?.$ref;
  return proyection
    ? {
        uid: proyection.uid,
        name: proyection.name,
        project: valueOfProject ? { $ref: valueOfProject } : null,
        floor: valueOfFloor ? { $ref: valueOfFloor } : null,
        type: valueOfType ? { $ref: valueOfType } : null,
        model: valueOfModel ? { $ref: valueOfModel } : null,
        configTemplate: valueOfConfigTemplate ? { $ref: valueOfConfigTemplate } : null,
        posX: proyection.posX,
        posY: proyection.posY,
        version: proyection.version,
      }
    : null;
}
