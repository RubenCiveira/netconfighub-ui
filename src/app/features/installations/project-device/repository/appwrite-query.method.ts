/* @autogenerated */
import { Query } from 'appwrite';
import { ProjectDeviceFilter } from '../model/project-device.model';
import { Observable, of } from 'rxjs';
export function appwriteQuery(query: ProjectDeviceFilter): Observable<string[]> {
  const constraints: string[] = [];
  if (query.name) {
    constraints.push(Query.equal('name', query.name as any));
  }
  if (query.project) {
    constraints.push(Query.equal('project', query.project as any));
  }
  if (query.projects) {
    const isArray = Array.isArray(query.projects);
    if (isArray && query.projects?.length > 1) {
      const every: string[] = [];
      query.projects.forEach((val) => every.push(Query.equal('project', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('project', query.projects[0]));
    } else if (typeof query.projects === 'string') {
      constraints.push(Query.equal('project', query.projects as any));
    }
  }
  if (query.floor) {
    constraints.push(Query.equal('floor', query.floor as any));
  }
  if (query.floors) {
    const isArray = Array.isArray(query.floors);
    if (isArray && query.floors?.length > 1) {
      const every: string[] = [];
      query.floors.forEach((val) => every.push(Query.equal('floor', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('floor', query.floors[0]));
    } else if (typeof query.floors === 'string') {
      constraints.push(Query.equal('floor', query.floors as any));
    }
  }
  if (query.type) {
    constraints.push(Query.equal('type', query.type as any));
  }
  if (query.types) {
    const isArray = Array.isArray(query.types);
    if (isArray && query.types?.length > 1) {
      const every: string[] = [];
      query.types.forEach((val) => every.push(Query.equal('type', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('type', query.types[0]));
    } else if (typeof query.types === 'string') {
      constraints.push(Query.equal('type', query.types as any));
    }
  }
  if (query.model) {
    constraints.push(Query.equal('model', query.model as any));
  }
  if (query.models) {
    const isArray = Array.isArray(query.models);
    if (isArray && query.models?.length > 1) {
      const every: string[] = [];
      query.models.forEach((val) => every.push(Query.equal('model', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('model', query.models[0]));
    } else if (typeof query.models === 'string') {
      constraints.push(Query.equal('model', query.models as any));
    }
  }
  if (query.configTemplate) {
    constraints.push(Query.equal('configTemplate', query.configTemplate as any));
  }
  if (query.configTemplates) {
    const isArray = Array.isArray(query.configTemplates);
    if (isArray && query.configTemplates?.length > 1) {
      const every: string[] = [];
      query.configTemplates.forEach((val) => every.push(Query.equal('configTemplate', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('configTemplate', query.configTemplates[0]));
    } else if (typeof query.configTemplates === 'string') {
      constraints.push(Query.equal('configTemplate', query.configTemplates as any));
    }
  }
  return of(constraints);
}
