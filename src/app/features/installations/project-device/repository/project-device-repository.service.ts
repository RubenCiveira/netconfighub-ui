/* @autogenerated */
import { appwriteQuery } from './appwrite-query.method';
import { appwriteAcl } from './appwrite-acl.method';
import { selectorProvider, SelectorProvider } from '@common/data/selector-provider';
import { RepositoryService, RepositoryMetadata } from '@common/data/repository/repository.service';
import { Acl } from '@common/data/acl/acl.model';
import { appwriteReader } from './appwrite-reader.method';
import { FloorRepository } from '@features/organization/floor/repository/floor-repository.service';
import {
  ProjectDeviceProjection,
  ProjectDeviceFilter,
  ProjectDevice,
} from '@features/installations/project-device/model/project-device.model';
import { appwriteDataNormalizer } from './appwrite-data-normalizer.method';
import { Slide } from '@common/data/repository/provider/repository-provider.interface';
import { AppwriteDataBuilder } from '@common/appwrite/data/appwrite-data-builder.service';
import { ConfigTemplateRepository } from '@features/infrastructure/config-template/repository/config-template-repository.service';
import { ModelRepository } from '@features/infrastructure/model/repository/model-repository.service';
import { of, Observable } from 'rxjs';
import { ProjectRepository } from '@features/installations/project/repository/project-repository.service';
import { TypeRepository } from '@features/infrastructure/type/repository/type-repository.service';
import { Signal, Injectable } from '@angular/core';
import { Tick, Shift } from '@common/data/repository/repository.model';

@Injectable({ providedIn: 'root' })
export class ProjectDeviceRepository {
  private readonly repo: RepositoryService<ProjectDevice, ProjectDeviceFilter>;
  public static metadata(api: AppwriteDataBuilder): RepositoryMetadata<ProjectDevice, ProjectDeviceFilter> {
    return {
      key: 'uid',
      name: 'project-device',
      provider: api.provider(
        'uid',
        'netconfighub_documents',
        'netconfighub_project_device',
        'netconfighub_attacheds',
        appwriteAcl,
        appwriteQuery,
        appwriteReader,
        appwriteDataNormalizer,
      ),
      reference: (name: string): RepositoryService<any, any> | null => {
        if ('project' == name) {
          return new RepositoryService(ProjectRepository.metadata(api));
        }
        if ('floor' == name) {
          return new RepositoryService(FloorRepository.metadata(api));
        }
        if ('type' == name) {
          return new RepositoryService(TypeRepository.metadata(api));
        }
        if ('model' == name) {
          return new RepositoryService(ModelRepository.metadata(api));
        }
        if ('configTemplate' == name) {
          return new RepositoryService(ConfigTemplateRepository.metadata(api));
        }
        return null;
      },
    };
  }
  constructor(api: AppwriteDataBuilder) {
    this.repo = new RepositoryService(ProjectDeviceRepository.metadata(api));
  }
  acl(): Tick<{ generic: Acl; specific: Acl }, string | null> {
    return this.repo.acl();
  }
  checkAcl(key?: string): Observable<Acl> {
    return this.repo.checkAcl(key || null);
  }
  generateComb(): string {
    return this.repo.generateComb();
  }

  add(item: ProjectDevice): Observable<ProjectDevice> {
    item['uid'] = this.generateComb();
    return this.repo.add(item);
  }
  update(item: ProjectDevice): Observable<ProjectDevice> {
    return this.repo.update(item);
  }
  deleteByKey(item: string): Observable<void> {
    return this.repo.deleteByKey(item);
  }
  canDeleteSelection(): boolean {
    return this.repo.canDeleteSelection();
  }
  deleteSelection(filter: ProjectDeviceFilter): Observable<any> {
    return this.repo.deleteSelection(this.publicQueryFilter(filter));
  }
  retrieve(code: string): Observable<ProjectDevice | undefined> {
    return this.repo.retrieve(code);
  }
  projection(includes: string[]): Tick<ProjectDeviceProjection, string> {
    return this.repo.projection(includes);
  }
  list(filter: ProjectDeviceFilter): Observable<Slide<ProjectDevice>> {
    return this.repo.list(this.publicQueryFilter(filter));
  }
  values(filter: ProjectDeviceFilter): Observable<ProjectDevice[]> {
    return this.repo.values(this.publicQueryFilter(filter));
  }
  projections(includes: string[]): Shift<ProjectDeviceProjection[], ProjectDeviceFilter> {
    return this.repo.projections(includes);
  }
  selectorProvider(filter?: Signal<ProjectDeviceFilter>): SelectorProvider<ProjectDevice, { $ref: string }> {
    return selectorProvider({
      search: (text: string) => {
        const filterValue = filter ? filter() : { limit: 10 };
        filterValue.search = text;
        return this.values(filterValue);
      },
      display: (item: ProjectDevice) => {
        return item.name!;
      },
      value: (item: ProjectDevice) => {
        return { $ref: item.uid!, $id: (item as any).$id };
      },
      select: (ref: { $ref: string }) => {
        return ref['$ref'] ? this.retrieve(ref['$ref']) : of(undefined);
      },
      equals: (one: { $ref: string }, other: { $ref: string }) => {
        return one.$ref === other.$ref;
      },
    });
  }
  private publicQueryFilter(filter: ProjectDeviceFilter): ProjectDeviceFilter {
    const morphed = {} as any;
    if (filter.search) {
      morphed['search'] = filter.search;
    }
    if (filter.uids) {
      morphed['uids'] = filter.uids.join(',');
    }
    if (filter.limit) {
      morphed['limit'] = filter.limit;
    }
    if (filter.order) {
      morphed['order'] = filter.order;
    }
    if (filter.name) {
      morphed['name'] = filter.name;
    }
    if (filter.project) {
      morphed['project'] = filter.project;
    }
    if (filter.projects) {
      morphed['projects'] = filter.projects;
    }
    if (filter.floor) {
      morphed['floor'] = filter.floor;
    }
    if (filter.floors) {
      morphed['floors'] = filter.floors;
    }
    if (filter.type) {
      morphed['type'] = filter.type;
    }
    if (filter.types) {
      morphed['types'] = filter.types;
    }
    if (filter.model) {
      morphed['model'] = filter.model;
    }
    if (filter.models) {
      morphed['models'] = filter.models;
    }
    if (filter.configTemplate) {
      morphed['config-template'] = filter.configTemplate;
    }
    if (filter.configTemplates) {
      morphed['config-templates'] = filter.configTemplates;
    }
    return morphed;
  }
}
