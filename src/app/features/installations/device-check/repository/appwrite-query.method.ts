/* @autogenerated */
import { Query } from 'appwrite';
import { DeviceCheckFilter } from '../model/device-check.model';
import { Observable, of } from 'rxjs';
export function appwriteQuery(query: DeviceCheckFilter): Observable<string[]> {
  const constraints: string[] = [];
  if (query.result) {
    constraints.push(Query.equal('result', query.result as any));
  }
  if (query.projectDevice) {
    constraints.push(Query.equal('projectDevice', query.projectDevice as any));
  }
  if (query.projectDevices) {
    const isArray = Array.isArray(query.projectDevices);
    if (isArray && query.projectDevices?.length > 1) {
      const every: string[] = [];
      query.projectDevices.forEach((val) => every.push(Query.equal('projectDevice', val)));
      constraints.push(Query.or(every));
    } else if (isArray) {
      constraints.push(Query.equal('projectDevice', query.projectDevices[0]));
    } else if (typeof query.projectDevices === 'string') {
      constraints.push(Query.equal('projectDevice', query.projectDevices as any));
    }
  }
  return of(constraints);
}
