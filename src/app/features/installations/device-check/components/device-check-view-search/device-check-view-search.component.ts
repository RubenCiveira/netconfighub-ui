/* @autogenerated */
import { SelectorProvider } from 'app/common/data/selector-provider';
import { DeviceCheck } from 'app/features/installations/device-check/model/device-check.model';
import { DeviceCheckRepository } from 'app/features/installations/device-check/repository/device-check-repository.service';
import { Tick } from 'app/common/data/repository/repository.model';
import { Acl } from 'app/common/data/acl/acl.model';
import { ProjectDeviceRepository } from 'app/features/installations/project-device/repository/project-device-repository.service';
import { SubFormEditable } from 'app/common/toolkit/editable/subform-editable';
import {
  ProjectDevice,
  ProjectDeviceFilter,
} from 'app/features/installations/project-device/model/project-device.model';
import { BaseEditable } from 'app/common/toolkit/editable/base-editable';
import { FormGroup, FormControl } from '@angular/forms';
import { effect, computed, Component, input } from '@angular/core';

@Component({
  selector: 'device-check-view-search',
  templateUrl: './device-check-view-search.component.html',
  styleUrls: ['./device-check-view-search.component.scss'],
  providers: BaseEditable.getValidableAccessorProvider(DeviceCheckViewSearchComponent),
  standalone: false,
})
export class DeviceCheckViewSearchComponent extends SubFormEditable<any> {
  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;
  uid = computed(() => this.value()?.uid);
  projectDevicesProvider: SelectorProvider<ProjectDevice, { $ref: string }>;
  projectDevicesFilter = input<ProjectDeviceFilter>({ limit: 100 });
  projectDeviceProvider: SelectorProvider<ProjectDevice, { $ref: string }>;
  projectDeviceFilter = input<ProjectDeviceFilter>({ limit: 100 });
  public constructor(deviceCheckRepository: DeviceCheckRepository, projectDeviceRepository: ProjectDeviceRepository) {
    super(
      new FormGroup({
        result: new FormControl<any>(null),
        search: new FormControl<string>(''),
        projectDevices: new FormControl<any>(null),
        projectDevice: new FormControl<any>(null),
        order: new FormControl<string>(''),
      }),
    );
    this.acl = deviceCheckRepository.acl();
    effect(() => {
      this.acl.fetch(this.uid() || null);
    });
    effect(() => {
      const vals = this.acl();
      const value = this.value();
      const on = this.uid() ? vals?.specific : vals?.generic;
      setTimeout(() => {
        this.definedFixed.set(on?.fields?.noEditables || []);
        this.definedHidden.set(on?.fields?.noVisibles || []);
      });
    });
    this.projectDevicesProvider = projectDeviceRepository.selectorProvider(this.projectDevicesFilter);
    this.projectDeviceProvider = projectDeviceRepository.selectorProvider(this.projectDeviceFilter);
    this.defaultValues = () => {
      return {
        result: null,
        search: '',
        projectDevices: null,
        projectDevice: null,
        order: '',
      };
    };
  }
}
