/* @autogenerated */
import { appwriteQuery } from './appwrite-query.method';
import { appwriteAcl } from './appwrite-acl.method';
import { ProjectFilter, ProjectProjection, Project } from '@features/installations/project/model/project.model';
import { selectorProvider, SelectorProvider } from '@common/data/selector-provider';
import { Acl } from '@common/data/acl/acl.model';
import { RepositoryMetadata, RepositoryService } from '@common/data/repository/repository.service';
import { appwriteReader } from './appwrite-reader.method';
import { appwriteDataNormalizer } from './appwrite-data-normalizer.method';
import { SiteRepository } from '@features/organization/site/repository/site-repository.service';
import { Slide } from '@common/data/repository/provider/repository-provider.interface';
import { AppwriteDataBuilder } from '@common/appwrite/data/appwrite-data-builder.service';
import { Observable, of } from 'rxjs';
import { Shift, Tick } from '@common/data/repository/repository.model';
import { Injectable, Signal } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class ProjectRepository {
  private readonly repo: RepositoryService<Project, ProjectFilter>;
  public static metadata(api: AppwriteDataBuilder): RepositoryMetadata<Project, ProjectFilter> {
    return {
      key: 'uid',
      name: 'project',
      provider: api.provider(
        'uid',
        'netconfighub_documents',
        'netconfighub_project',
        'netconfighub_attacheds',
        appwriteAcl,
        appwriteQuery,
        appwriteReader,
        appwriteDataNormalizer,
      ),
      reference: (name: string): RepositoryService<any, any> | null => {
        if ('site' == name) {
          return new RepositoryService(SiteRepository.metadata(api));
        }
        return null;
      },
    };
  }
  constructor(api: AppwriteDataBuilder) {
    this.repo = new RepositoryService(ProjectRepository.metadata(api));
  }
  acl(): Tick<{ generic: Acl; specific: Acl }, string | null> {
    return this.repo.acl();
  }
  checkAcl(key?: string): Observable<Acl> {
    return this.repo.checkAcl(key || null);
  }
  generateComb(): string {
    return this.repo.generateComb();
  }

  add(item: Project): Observable<Project> {
    item['uid'] = this.generateComb();
    return this.repo.add(item);
  }
  update(item: Project): Observable<Project> {
    return this.repo.update(item);
  }
  deleteByKey(item: string): Observable<void> {
    return this.repo.deleteByKey(item);
  }
  canDeleteSelection(): boolean {
    return this.repo.canDeleteSelection();
  }
  deleteSelection(filter: ProjectFilter): Observable<any> {
    return this.repo.deleteSelection(this.publicQueryFilter(filter));
  }
  retrieve(code: string): Observable<Project | undefined> {
    return this.repo.retrieve(code);
  }
  projection(includes: string[]): Tick<ProjectProjection, string> {
    return this.repo.projection(includes);
  }
  list(filter: ProjectFilter): Observable<Slide<Project>> {
    return this.repo.list(this.publicQueryFilter(filter));
  }
  values(filter: ProjectFilter): Observable<Project[]> {
    return this.repo.values(this.publicQueryFilter(filter));
  }
  projections(includes: string[]): Shift<ProjectProjection[], ProjectFilter> {
    return this.repo.projections(includes);
  }
  selectorProvider(filter?: Signal<ProjectFilter>): SelectorProvider<Project, { $ref: string }> {
    return selectorProvider({
      search: (text: string) => {
        const filterValue = filter ? filter() : { limit: 10 };
        filterValue.search = text;
        return this.values(filterValue);
      },
      display: (item: Project) => {
        return item.name!;
      },
      value: (item: Project) => {
        return { $ref: item.uid!, $id: (item as any).$id };
      },
      select: (ref: { $ref: string }) => {
        return ref['$ref'] ? this.retrieve(ref['$ref']) : of(undefined);
      },
      equals: (one: { $ref: string }, other: { $ref: string }) => {
        return one.$ref === other.$ref;
      },
    });
  }
  private publicQueryFilter(filter: ProjectFilter): ProjectFilter {
    const morphed = {} as any;
    if (filter.search) {
      morphed['search'] = filter.search;
    }
    if (filter.uids) {
      morphed['uids'] = filter.uids.join(',');
    }
    if (filter.limit) {
      morphed['limit'] = filter.limit;
    }
    if (filter.order) {
      morphed['order'] = filter.order;
    }
    if (filter.name) {
      morphed['name'] = filter.name;
    }
    if (filter.site) {
      morphed['site'] = filter.site;
    }
    if (filter.sites) {
      morphed['sites'] = filter.sites;
    }
    return morphed;
  }
}
