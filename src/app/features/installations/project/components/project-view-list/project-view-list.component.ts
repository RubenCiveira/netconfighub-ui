/* @autogenerated */
import { ProjectRepository } from 'app/features/installations/project/repository/project-repository.service';
import { ProjectFilter, ProjectProjection } from 'app/features/installations/project/model/project.model';
import { FormControl } from '@angular/forms';
import { Shift } from '@common/data/repository/repository.model';
import { input, effect, Component } from '@angular/core';

@Component({
  selector: 'project-view-list',
  templateUrl: './project-view-list.component.html',
  styleUrls: ['./project-view-list.component.scss'],
  standalone: false,
})
export class ProjectViewListComponent {
  filters = input<ProjectFilter>();
  actionName = input<string>('project');
  fixed = input<{ [key: string]: any }>();
  hidden = input<{ [key: string]: any }>();
  search = new FormControl<any>(undefined);
  list: Shift<ProjectProjection[], ProjectFilter>;

  constructor(repository: ProjectRepository) {
    this.list = repository.projections(['site']);
    effect(() => {
      setTimeout(() => this.makeSearch());
    });
  }
  makeSearch() {
    const result = { limit: 10 } as any;
    const filter = this.search.value;
    const external = this.filters();
    if (external?.search) {
      result.search = external.search;
    }
    if (external?.name) {
      result.name = external.name;
    }
    if (external?.site) {
      result.site = external.site;
    }
    if (external?.sites) {
      result.sites = external.sites;
    }
    if (filter?.search) {
      result.search = filter.search;
    }
    if (filter?.name) {
      result.name = filter.name;
    }
    if (filter?.site?.$ref) {
      result.site = filter.site.$ref;
    }
    if (filter?.sites?.$ref) {
      result.sites = filter.sites.$ref;
    }
    if (filter?.order) {
      result.order = filter.order;
    }
    this.list.fetch(result);
  }

  next() {
    this.list.next();
  }

  reload() {
    this.list.reset();
  }

  prev() {
    console.log('PREV');
  }
}
