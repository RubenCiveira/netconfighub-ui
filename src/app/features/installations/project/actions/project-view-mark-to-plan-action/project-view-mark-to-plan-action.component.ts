/* @autogenerated */
import { TranslocoService } from '@jsverse/transloco';
import { ActionContainerComponent } from 'app/common/toolkit/action/action-container.component';
import { Action } from 'app/common/toolkit/action/action.model';
import { Tick } from 'app/common/data/repository/repository.model';
import { ProjectRepository } from 'app/features/installations/project/repository/project-repository.service';
import { Acl } from 'app/common/data/acl/acl.model';
import { Project } from 'app/features/installations/project/model/project.model';
import { Subscription } from 'rxjs';
import { MatSnackBar } from '@angular/material/snack-bar';
import { MatDialog, MatDialogRef } from '@angular/material/dialog';
import { OnDestroy, input, viewChild, Component, signal, TemplateRef } from '@angular/core';

@Component({
  selector: 'project-view-mark-to-plan-action',
  standalone: false,
  templateUrl: './project-view-mark-to-plan-action.component.html',
  styleUrl: './project-view-mark-to-plan-action.component.scss',
})
export class ProjectViewMarkToPlanActionComponent implements Action, OnDestroy {
  readonly name = 'mark-to-plan';
  readonly contextual = true;
  readonly multiple = false;
  container = signal<ActionContainerComponent | undefined>(undefined);
  selection = signal<any[]>([]);
  render = signal<TemplateRef<any> | undefined>(undefined);
  dialogTemplate = viewChild<TemplateRef<any>>('dialogTemplate');

  title = signal<string>('Borrando el item');
  label = signal<string>('mark to plan');
  icon = signal<string>('visibility');
  tooltip = signal<string>('mark to plan el elemento seleccionado');
  default = input<boolean>(false);

  noMatchSignal = signal(false);
  visibleValue = signal(false);
  enabledValue = signal(true);

  acl: Tick<{ generic: Acl; specific: Acl }, string | null>;

  private dialgoRef?: MatDialogRef<any, any>;
  private dialogSubs?: Subscription;
  private dismiss = 'Close';
  private report = 'Deleted...';

  constructor(
    private readonly repository: ProjectRepository,
    private readonly dialog: MatDialog,
    private readonly snakeBar: MatSnackBar,
    transloco: TranslocoService,
  ) {
    this.acl = repository.acl();
    this.acl.fetch(null).subscribe((info) => {
      this.visibleValue.set(this.allowed(info?.generic));
    });
    transloco.selectTranslateObject('action.mark-to-plan', {}, 'installations/project').subscribe((val) => {
      if (val.label) {
        this.label.set(val.label);
      }
      if (val.tooltip) {
        this.tooltip.set(val.tooltip);
      }
      if (val.icon) {
        this.icon.set(val.icon);
      }
      if (val.title) {
        this.title.set(val.title);
      }
      if (val.dismiss) {
        this.dismiss = val.dismiss;
      }
      if (val.report) {
        this.report = val.report;
      }
    });
  }

  visible(items: any[]) {
    const canApply = items.every((item) => item.status !== 'planned') && true;
    return canApply ? this.visibleValue : this.noMatchSignal;
  }

  enabled(items: any[]) {
    return this.enabledValue;
  }
  run(): void {
    const template = this.dialogTemplate();
    if (template) {
      this.dialgoRef?.close();
      this.dialgoRef = this.dialog.open(template);
      this.dialogSubs = this.dialgoRef.afterClosed().subscribe((val) => {
        if (val) {
          this.markToPlan(this.selection()[0] as Project);
        } else {
          this.container()?.close();
        }
      });
    }
  }

  ngOnDestroy(): void {
    this.dialgoRef?.close();
    this.dialogSubs?.unsubscribe();
  }

  private markToPlan(item: Project) {
    this.repository.markToPlan(item.uid).subscribe(() => {
      this.container()?.close();
      this.snakeBar.open(this.report, this.dismiss, { duration: 5000 });
    });
  }
  private allowed(allow: Acl | undefined) {
    return !!allow?.allows?.find((info) => info.name == 'mark-to-plan')?.allowed;
  }
}
