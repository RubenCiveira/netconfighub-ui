/* @autogenerated */
import {
  Component,
  ContentChildren,
  Input,
  QueryList,
  AfterContentInit,
  TemplateRef,
  OnDestroy,
  OnChanges,
  SimpleChanges,
} from '@angular/core';
import {
  LocalRouteStateBind,
  LocalRouteStateService,
} from '@common/interaction/local-route-state/local-route-state.service';
import { LocalRouteDirective } from './local-route.directive';
import { Subscription } from 'rxjs';
import { LocalRouterService } from './local-router.service';

@Component({
  selector: 'local-route-context',
  template: `
    @if (currentTemplate) {
      <ng-container *ngTemplateOutlet="currentTemplate"></ng-container>
    }
    @if (!templates || templates.length == 0) {
      <h1>To use a local route, provide each route as a template with [localRoute] directive</h1>
    }
  `,
  providers: [LocalRouterService],
})
export class LocalRouteContextComponent implements AfterContentInit, OnDestroy, OnChanges {
  @Input() param = 'view';
  @Input() bind?: LocalRouteStateBind;

  @ContentChildren(LocalRouteDirective)
  templates!: QueryList<LocalRouteDirective>;

  currentTemplate: TemplateRef<any> | null = null;
  suscription?: Subscription;

  constructor(
    private readonly routeState: LocalRouteStateService,
    register: LocalRouterService,
  ) {
    (register as any).context = this;
  }

  ngAfterContentInit() {
    this.suscription?.unsubscribe();
    this.suscription = this.bind!.watch().subscribe((params) => {
      this.setTemplateForParam(params[this.param]);
    });
  }

  ngOnChanges(_: SimpleChanges): void {
    if (!this.param) {
      this.param = 'view';
    }
    if (!this.bind) {
      this.bind = this.routeState.bind([this.param]);
    }
  }

  ngOnDestroy(): void {
    this.suscription?.unsubscribe();
  }

  // Seleccionar la plantilla adecuada segÃºn el valor del query param
  setTemplateForParam(value: string | undefined) {
    let matchingTemplate: LocalRouteDirective | undefined;
    if (!value) {
      matchingTemplate = this.templates.find((tpl) => tpl.isInitial());
    } else {
      matchingTemplate = this.templates.find((tpl) => tpl.on === value);
      if (!matchingTemplate) {
        matchingTemplate = this.templates.find((tpl) => tpl.isFallback());
      }
    }
    this.currentTemplate = matchingTemplate?.template || null;
  }
}
