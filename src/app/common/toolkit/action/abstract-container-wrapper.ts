/* @autogenerated */
import { Signal, TemplateRef } from '@angular/core';
import { ActionContainerComponent } from './action-container.component';

export abstract class AbstactContainerWrapper {
  actions!: Signal<ActionContainerComponent | undefined>;

  // abstract get actions(): Signal<TestActionContainerComponent | undefined>;

  get theToolbarTemplate(): Signal<TemplateRef<any> | undefined> {
    return this.actions()!.theToolbarTemplate;
  }

  get theContextTemplate() {
    return this.actions()!.theContextTemplate;
  }

  get theSelectionTemplate() {
    return this.actions()!.theSelectionTemplate;
  }

  get selectionModel() {
    return this.actions()!.selectionModel;
  }

  hasSelection() {
    return !!this.actions()?.hasSelection();
  }

  hasMultiple() {
    return !!this.actions()?.hasMultiple();
  }

  defaultAction(items: any[]) {
    this.actions()?.defaultAction(items);
  }

  execute(action: string, items?: any[]) {
    this.actions()?.executeAction(action, items);
  }

  close() {
    this.actions()?.close();
  }
}
