/* @autogenerated */
import { Component, input, signal, TemplateRef, viewChild } from '@angular/core';
import { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { DownloadBlob, UploadProgress } from '@common/data/repository/provider/repository-provider.interface';
import { Observable, Subscription } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { BaseEditable } from '../base-editable';
import { CommonModule } from '@angular/common';
import { TranslocoModule } from '@jsverse/transloco';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatDividerModule } from '@angular/material/divider';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatFormFieldModule } from '@angular/material/form-field';
import { HttpClient } from '@angular/common/http';

type UploadState = 'select' | 'uploading' | 'complete';

@Component({
  standalone: true,
  selector: 'editable-upload',
  providers: BaseEditable.getAccessorProvider(EditableUploadComponent),
  imports: [
    CommonModule,
    TranslocoModule,
    FormsModule,
    ReactiveFormsModule,
    MatInputModule,
    MatButtonModule,
    MatDialogModule,
    MatDividerModule,
    MatIconModule,
    MatProgressBarModule,
    MatFormFieldModule,
  ],
  styles: [':host { display: flex; flex-direction:row; }'],
  styleUrls: ['./editable-upload.component.scss'],
  templateUrl: './editable-upload.component.html',
})
export class EditableUploadComponent extends BaseEditable<any> {
  upload = input.required<(file: File) => Observable<UploadProgress>>();
  download = input.required<(url: string) => Observable<DownloadBlob> | null>();

  loading = signal<boolean>(false);
  progressValue = signal<number>(0);
  response = signal<string | undefined>(undefined);

  fileDialog = viewChild<TemplateRef<any>>('fileDialog');
  dialogRef?: MatDialogRef<TemplateRef<any>>;
  uploadObserver?: Subscription;

  isImageFile = false;
  filePreviewUrl: string | null = null;
  isDragOver = false;
  selectedFileName: string | null = null;
  uploadState = signal<String>('select');

  constructor(
    private readonly dialog: MatDialog,
    private readonly http: HttpClient,
  ) {
    super();
  }

  downloadFile() {
    const callback = this.download();
    if (callback == null) {
      alert('No callback');
    } else {
      const subs = callback(this.value());
      subs?.subscribe((blob) => {
        const downloadUrl = window.URL.createObjectURL(blob.data);
        const a = document.createElement('a');
        a.href = downloadUrl;
        a.download = blob.name;
        a.click();
        window.URL.revokeObjectURL(downloadUrl);
      });
    }
  }

  selectFile() {
    if (!this.control?.disabled) {
      const template = this.fileDialog();
      if (template) {
        this.dialogRef = this.dialog.open(template);
      }
    }
  }

  save(data: any) {
    this.dialogRef?.close();
    this.updateValue(data);
  }

  openFileBrowser(event: any, button: any) {
    event.preventDefault();
    button?.click();
  }

  showPreviewImage(event: any): void {
    if (event.target.files && event.target.files[0]) {
      this.uploadFile(event.target.files[0]);
    }
  }

  uploadFile(file: any): void {
    this.uploadState.set('uploading');
    this.selectedFileName = file.name;
    this.isImageFile = file.type.startsWith('image/');
    this.loading.set(true);
    const reader = new FileReader();
    reader.onload = (e: any) => {
      // this.localUrl = e.target.result;
    };
    reader.readAsDataURL(file);
    this.uploadObserver?.unsubscribe();
    this.uploadObserver = this.upload()(file)
      .pipe(
        catchError((error: any) => {
          console.error('Error', error);
          throw error;
        }),
      )
      .subscribe((data: UploadProgress) => {
        console.log(data);
        if (data.data) {
          this.uploadState.set('complete');
          if (this.isImageFile) {
            // FIXME: the preview url is data.data
            // but the jwt is not send and cant be view
            this.filePreviewUrl = URL.createObjectURL(file);
          } else {
            this.filePreviewUrl = null;
          }
          this.response.set(data.data);
        } else {
          this.progressValue.set(data.progressPercent);
        }
      });
  }

  onDragOver(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = true;
  }

  onDragLeave(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = false;
  }

  onDrop(event: DragEvent) {
    event.preventDefault();
    event.stopPropagation();
    this.isDragOver = false;

    const files = event.dataTransfer?.files;
    if (files && files.length > 0) {
      const file = files[0]; // Only take the first file
      // this.selectedFileName = file.name;
      this.uploadFile(file);
    }
  }

  discardAndChooseAnother() {
    // Clean up any preview URLs to prevent memory leaks
    if (this.filePreviewUrl) {
      URL.revokeObjectURL(this.filePreviewUrl);
      this.filePreviewUrl = null;
    }

    // Reset to selection state
    this.uploadState.set('select');
    this.progressValue.set(0);
    this.response.set(undefined);
    this.selectedFileName = null;
  }

  cancelUpload() {
    // Clear the interval for our simulation
    this.uploadObserver?.unsubscribe();

    // Reset to selection state
    this.uploadState.set('select');
    this.progressValue.set(0);
    this.response.set(undefined);
  }
}
