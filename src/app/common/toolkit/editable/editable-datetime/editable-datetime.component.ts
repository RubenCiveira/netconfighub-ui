/* @autogenerated */
import { Component } from '@angular/core';
import { MatDatepickerModule } from '@angular/material/datepicker';
import { MatFormFieldModule } from '@angular/material/form-field';
import { provideNativeDateAdapter } from '@angular/material/core';

import { MatInputModule } from '@angular/material/input';
import { BaseEditable } from '../base-editable';
import { FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Subscription } from 'rxjs';
import { TranslocoModule } from '@jsverse/transloco';
import { AppStateService } from '@common/context/state/app-state.service';
import { DateAdapter } from '@angular/material/core';

@Component({
  selector: 'editable-datetime',
  standalone: true,
  imports: [FormsModule, ReactiveFormsModule, MatFormFieldModule, MatInputModule, MatDatepickerModule, TranslocoModule],
  providers: [provideNativeDateAdapter(), ...BaseEditable.getAccessorProvider(EditableDatetimeComponent)],
  styleUrls: ['./editable-datetime.component.scss'],
  templateUrl: './editable-datetime.component.html',
})
export class EditableDatetimeComponent extends BaseEditable<Date | null> {
  day = new FormControl<Date>(new Date());
  hour = new FormControl<string>('');

  private subscriptions = new Subscription();

  public constructor(dateAdapter: DateAdapter<any>, appState: AppStateService) {
    super();
    this.subscriptions.add(
      appState.language.subscribe((lang) => {
        dateAdapter.setLocale(lang);
      }),
    );
  }

  override ngOnInit(): void {
    super.ngOnInit();
    this.bind([this.day, this.hour]);
    this.subscriptions.add(
      this.control.valueChanges.subscribe((externalChange) => {
        if (typeof externalChange === 'string') {
          externalChange = new Date(externalChange);
        }
        this.setValue(externalChange);
      }),
    );
    this.subscriptions.add(
      this.day.valueChanges.subscribe((dayChange) => {
        const value = this.value();
        if (dayChange) {
          if (typeof dayChange === 'string') {
            dayChange = new Date(dayChange);
          }
          const date = value ? new Date(value) : new Date();
          if (this.dayChange(date, dayChange)) {
            date.setFullYear(dayChange.getFullYear());
            date.setMonth(dayChange.getMonth());
            date.setDate(dayChange.getDate());
            this.updateValue(date);
          }
        } else if (value) {
          this.updateValue(null);
        }
      }),
    );
    this.subscriptions.add(
      this.hour.valueChanges.subscribe((hourChange) => {
        const value = this.value();
        if (hourChange) {
          const [hours, minutes] = hourChange.split(':').map(Number);
          const date = value ? new Date(value) : new Date();
          if (this.hourChange(date, hourChange)) {
          }
          date.setHours(hours);
          date.setMinutes(minutes);
          this.updateValue(date);
        } else if (value) {
          this.updateValue(null);
        }
      }),
    );
    this.setValue(new Date());
  }

  override ngOnDestroy(): void {
    this.subscriptions.unsubscribe();
    super.ngOnDestroy();
  }

  private dayChange(one: Date, other: Date) {
    if (!one && !other) {
      return false;
    }
    if (!one || !other) {
      return true;
    }
    return (
      one.getFullYear() !== other.getFullYear() ||
      one.getMonth() !== other.getMonth() ||
      one.getDate() !== other.getDate()
    );
  }

  private hourChange(one: Date, other: string) {
    return other != this.toHours(one);
  }

  private setValue(value: Date) {
    this.day.patchValue(value);
    this.hour.patchValue(this.toHours(value));
  }

  private toHours(value: Date) {
    return value
      ? value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0')
      : null;
  }
}
