/* @autogenerated */
import { Component, ElementRef, input, viewChildren } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { COMMA, ENTER } from '@angular/cdk/keycodes';
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { BaseEditable } from '../base-editable';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatChipsModule } from '@angular/material/chips';
import { MatInputModule } from '@angular/material/input';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { CommonModule } from '@angular/common';
import { TranslocoModule } from '@jsverse/transloco';
import { SearchEditable } from '../search-editable';

export interface ChipsDisplay<T, R> {
  // Convierte el dato remotoo en un string
  display(item: T): string;
  build(item: T): R;
  areEquals(item: R, other: R): boolean;
}

@Component({
  selector: 'editable-chips',
  imports: [
    FormsModule,
    MatFormFieldModule,
    MatAutocompleteModule,
    MatChipsModule,
    MatInputModule,
    MatIconModule,
    MatProgressBarModule,
    ReactiveFormsModule,
    CommonModule,
    TranslocoModule,
  ],
  providers: BaseEditable.getAccessorProvider(EditableChipsComponent),
  standalone: true,
  styles: [':host { display: flex; flex-direction:row; }'],
  templateUrl: './editable-chips.component.html',
})
export class EditableChipsComponent<V, T, R> extends SearchEditable<V, R> {
  render = input.required<ChipsDisplay<V, T>>();
  inputForChips = viewChildren('inputForChips');

  separatorKeysCodes: number[] = [ENTER, COMMA];

  public constructor() {
    super();
  }

  override select(value: R | null): void {
    this.addChip(value);
  }

  addSelectChip(item: any) {
    this.addChip(item);
  }

  addChip(_item: any) {
    const value = this.search.value;
    if (value && typeof value !== 'string') {
      const item = this.render().build(this.search.value);
      const vcc: any[] = this.control.value ? [...this.control.value] : [];
      if (item && !vcc.find((row) => this.render().areEquals(row, item))) {
        vcc.push(item);
        const inputs: ElementRef[] = this.inputForChips() as any;
        inputs[0].nativeElement.value = '';
        this.search.patchValue('');
        this.updateValue(vcc as any);
      }
    }
  }

  removeChip(item: any) {
    const vcc: any[] = [...this.control.value];
    const index = vcc.indexOf(item);
    if (index > -1) {
      // only splice array when item is found
      vcc.splice(index, 1); // 2nd parameter means remove one item only
      this.updateValue(vcc as any);
    }
  }
}
