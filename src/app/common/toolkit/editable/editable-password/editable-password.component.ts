/* @autogenerated */
import { CommonModule } from '@angular/common';
import { Component, TemplateRef, viewChild } from '@angular/core';
import {
  AbstractControlOptions,
  FormBuilder,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { TranslocoModule } from '@jsverse/transloco';
import { BaseEditable } from '../base-editable';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';
import { MatIconModule } from '@angular/material/icon';
import { MatDividerModule } from '@angular/material/divider';

@Component({
  template: `
    <mat-form-field>
      <mat-label>{{ label() + '.label' | transloco }}</mat-label>
      <input
        matInput
        [value]="'*****'"
        [required]="required()"
        [readonly]="true"
        type="password"
        placeholder="{{ label() + '.placeholder' | transloco }}"
      />
      @if (!control.disabled) {
        <button mat-button matSuffix (click)="chPass()">Cambiar</button>
      }
      @for (error of errorMessages(); track $index) {
        <mat-error>
          {{ label() + '.error.' + error | transloco }}
        </mat-error>
      }
    </mat-form-field>

    <ng-template #changeDialog>
      <div class="password-dialog-container">
        <div class="password-dialog-header">
          <h1 mat-dialog-title>Cambiar contraseña</h1>
          <button mat-icon-button mat-dialog-close aria-label="Cerrar diálogo">
            <mat-icon>close</mat-icon>
          </button>
        </div>

        <mat-divider></mat-divider>

        <div mat-dialog-content class="password-dialog-content">
          <p class="password-dialog-description">Introduce tu nueva contraseña y confírmala para continuar.</p>

          <form [formGroup]="passwordForm" class="password-form">
            <!-- New Password Field -->
            <mat-form-field appearance="outline" class="password-field">
              <mat-label>Nueva contraseña</mat-label>
              <input
                matInput
                [type]="hidePassword ? 'password' : 'text'"
                formControlName="newPassword"
                required
                autocomplete="new-password"
              />
              <button
                mat-icon-button
                matSuffix
                type="button"
                (click)="hidePassword = !hidePassword"
                [attr.aria-label]="'Mostrar contraseña'"
                [attr.aria-pressed]="!hidePassword"
              >
                <mat-icon>{{ hidePassword ? 'visibility_off' : 'visibility' }}</mat-icon>
              </button>
              @if (passwordForm.get('newPassword')?.hasError('required')) {
                <mat-error> La contraseña es obligatoria </mat-error>
              }
              @if (passwordForm.get('newPassword')?.hasError('minlength')) {
                <mat-error> La contraseña debe tener al menos 6 caracteres </mat-error>
              }
            </mat-form-field>

            <!-- Confirm Password Field -->
            <mat-form-field appearance="outline" class="password-field">
              <mat-label>Confirmar contraseña</mat-label>
              <input
                matInput
                [type]="hideConfirmPassword ? 'password' : 'text'"
                formControlName="confirmPassword"
                required
                autocomplete="new-password"
              />
              <button
                mat-icon-button
                matSuffix
                type="button"
                (click)="hideConfirmPassword = !hideConfirmPassword"
                [attr.aria-label]="'Mostrar contraseña'"
                [attr.aria-pressed]="!hideConfirmPassword"
              >
                <mat-icon>{{ hideConfirmPassword ? 'visibility_off' : 'visibility' }}</mat-icon>
              </button>
              @if (passwordForm.get('confirmPassword')?.hasError('required')) {
                <mat-error> La confirmación de contraseña es obligatoria </mat-error>
              }
              @if (
                passwordForm.hasError('passwordMismatch') && !passwordForm.get('confirmPassword')?.hasError('required')
              ) {
                <mat-error> Las contraseñas no coinciden </mat-error>
              }
            </mat-form-field>
          </form>
        </div>

        <mat-divider></mat-divider>

        <div mat-dialog-actions class="password-dialog-actions">
          <button mat-stroked-button mat-dialog-close (click)="close()">Cancelar</button>
          <button
            mat-raised-button
            color="primary"
            [disabled]="passwordForm.invalid"
            (click)="update()"
            cdkFocusInitial
          >
            Cambiar
          </button>
        </div>
      </div>
    </ng-template>
  `,
  selector: 'editable-password',
  imports: [
    FormsModule,
    ReactiveFormsModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatDialogModule,
    MatIconModule,
    MatDividerModule,
    CommonModule,
    TranslocoModule,
  ],
  providers: BaseEditable.getAccessorProvider(EditablePasswordComponent),
  standalone: true,
  styles: [
    `
      .password-dialog-container {
        position: relative;
        padding: 0;
        overflow: hidden;
      }

      .password-dialog-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 16px 24px;
      }

      .password-dialog-header h1 {
        margin: 0;
        font-size: 20px;
        font-weight: 500;
      }

      .password-dialog-content {
        padding: 24px;
        max-width: 400px;
      }

      .password-dialog-description {
        margin-top: 0;
        margin-bottom: 20px;
        color: rgba(0, 0, 0, 0.6);
      }

      .password-form {
        display: flex;
        flex-direction: column;
      }

      .password-field {
        width: 100%;
        margin-bottom: 16px;
      }

      .password-field:last-child {
        margin-bottom: 0;
      }

      .password-dialog-actions {
        display: flex;
        justify-content: flex-end;
        padding: 16px 24px;
        gap: 8px;
      }

      /* Estilos para modo oscuro si es necesario */
      :host-context(.dark) .password-dialog-description {
        color: rgba(255, 255, 255, 0.7);
      }
    `,
  ],
})
export class EditablePasswordComponent extends BaseEditable<string> {
  template = viewChild<TemplateRef<any>>('changeDialog');

  passwordForm: FormGroup;
  hidePassword = true;
  hideConfirmPassword = true;

  private dialogRef?: MatDialogRef<any>;

  constructor(
    private dialog: MatDialog,
    fb: FormBuilder,
  ) {
    super();
    this.passwordForm = fb.group(
      {
        newPassword: ['', [Validators.required, Validators.minLength(6)]],
        confirmPassword: ['', [Validators.required]],
      },
      {
        validators: this.passwordMatchValidator,
      } as AbstractControlOptions,
    );
  }

  passwordMatchValidator(g: FormGroup) {
    const newPassword = g.get('newPassword')?.value;
    const confirmPassword = g.get('confirmPassword')?.value;

    return newPassword === confirmPassword ? null : { passwordMismatch: true };
  }

  chPass() {
    const template = this.template();
    if (template) {
      this.dialogRef = this.dialog.open(template, {
        width: '400px',
      });
    } else {
      console.error('No template on the component');
    }
  }

  close() {
    this.dialogRef?.close();
  }

  update() {
    if (this.passwordForm.valid && this.control) {
      const newPassword = this.passwordForm.get('newPassword')?.value;
      this.control.setValue(newPassword);
      this.control.markAsDirty();
      this.control.updateValueAndValidity();
    }
    this.dialogRef?.close();
  }
}
