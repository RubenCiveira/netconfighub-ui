/* @autogenerated */
import { CommonModule } from '@angular/common';
import { ChangeDetectorRef, Component, viewChild } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslocoModule } from '@jsverse/transloco';
import { BaseEditable } from '../base-editable';
import { MatInputModule } from '@angular/material/input';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatAutocomplete, MatAutocompleteModule, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatIconModule } from '@angular/material/icon';
import { SearchEditable } from '../search-editable';

@Component({
  template: `
    <mat-form-field>
      <mat-label>{{ label() + '.label' | transloco }}</mat-label>
      <input
        matInput
        [required]="required()"
        placeholder="{{ label() + '.placeholder' | transloco }}"
        [matAutocomplete]="auto"
        (blur)="blur()"
        [formControl]="search"
      />
      <span matSuffix style="display: flex">
        @if (!control.disabled) {
          <mat-icon (click)="searchOptions(); $event.preventDefault()">keyboard_arrow_down</mat-icon>
        }
      </span>
      <mat-autocomplete
        #auto="matAutocomplete"
        [displayWith]="displayItem()"
        (optionSelected)="optionSelected($event.option.value)"
      >
        @for (item of options() || []; track $index) {
          <mat-option [value]="item">
            {{ provider().display(item) }}
          </mat-option>
        }
      </mat-autocomplete>
      @if (provider().searching()) {
        <mat-progress-bar mode="indeterminate"></mat-progress-bar>
      }
      @for (error of errorMessages(); track $index) {
        <mat-error>
          {{ label() + '.error.' + error | transloco }}
        </mat-error>
      }
    </mat-form-field>
  `,
  selector: 'editable-selectone',
  imports: [
    FormsModule,
    MatFormFieldModule,
    MatAutocompleteModule,
    MatInputModule,
    MatIconModule,
    MatProgressBarModule,
    ReactiveFormsModule,
    CommonModule,
    TranslocoModule,
  ],
  providers: BaseEditable.getAccessorProvider(EditableSelectoneComponent),
  standalone: true,
})
export class EditableSelectoneComponent<V, R> extends SearchEditable<V, R> {
  autoComplete = viewChild(MatAutocomplete);
  autoTrigger = viewChild(MatAutocompleteTrigger);

  public constructor(private readonly chdr: ChangeDetectorRef) {
    super();
    this.bindValueEffect();
  }

  override select(value: R | null): void {
    this.updateValue(value);
  }

  override readyOptions() {
    this.refresh();
  }
}
