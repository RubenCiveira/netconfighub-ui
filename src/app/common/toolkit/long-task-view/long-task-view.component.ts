/* @autogenerated */
import { ScrollingModule } from '@angular/cdk/scrolling';
import { CommonModule } from '@angular/common';
import { Component, Inject, OnDestroy, OnInit } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import { MatCardModule } from '@angular/material/card';
import { MatExpansionModule } from '@angular/material/expansion';
import { MatIconModule } from '@angular/material/icon';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { TranslocoModule } from '@jsverse/transloco';
import { Subscription } from 'rxjs';
import { LongTask, LongTaskStep } from 'app/common/data/long-task.model';

@Component({
  selector: 'long-task-view',
  templateUrl: './long-task-view.component.html',
  styleUrls: ['./long-task-view.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    ScrollingModule,
    MatDialogModule,
    MatButtonModule,
    MatCardModule,
    MatProgressSpinnerModule,
    MatIconModule,
    MatExpansionModule,
    TranslocoModule,
  ],
})
export class LongTaskViewComponent implements OnDestroy, OnInit {
  private subscription = new Subscription();

  step = '';
  status = '';
  tasks = [] as LongTaskStep[];
  currentStepProgress = 1;
  globalStepsProgress = 0;
  title = 'Delete file';
  known = false;

  constructor(@Inject(MAT_DIALOG_DATA) public data: any) {
    if (data.title) {
      this.title = data.title;
    }
    if (data.progress) {
      this.subscription.add(
        data.progress.subscribe((item: LongTask) => {
          this.tasks = [];
          this.status = item.status;
          let completedSteps = 0;
          this.known = false;
          item.steps.forEach((value: LongTaskStep) => {
            if (!value.errors) {
              value.errors = [];
            }
            if (!value.warns) {
              value.warns = [];
            }
            if (!value.oks) {
              value.oks = [];
            }
            this.tasks.push(value);
            if (value.status == 'FINISHED' || value.status == 'FAILED') {
              ++completedSteps;
            } else if (value.status == 'PROCESSING') {
              if (value.totalItems) {
                this.known = true;
                const total = value.totalItems || 100;
                const processed = value.processedItems;
                const part = processed / total;
                this.step = value.name;
                this.currentStepProgress = Math.min(95, Math.max(100 * part, 5));
              } else {
                this.known = false;
              }
            }
          });
          this.globalStepsProgress = (100 * completedSteps) / this.tasks.length;
        }),
      );
    }
  }

  allTheSame(value: LongTaskStep) {
    const warnNum = value.warns && value.warns.length > 0 ? 1 : 0;
    const erroNum = value.errors && value.errors.length > 0 ? 1 : 0;
    const oksNum = value.oks && value.oks.length > 0 ? 1 : 0;

    return warnNum + erroNum + oksNum < 2;
  }

  ngOnDestroy(): void {
    this.subscription.unsubscribe();
  }

  ngOnInit(): void {
    this.currentStepProgress = 1;
  }
}
