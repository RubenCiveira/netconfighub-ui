/* @autogenerated */
import { AfterViewInit, Component, ElementRef, Renderer2, ViewEncapsulation } from '@angular/core';
import { MAT_FORM_FIELD_DEFAULT_OPTIONS } from '@angular/material/form-field';

@Component({
  selector: 'form-layout',
  templateUrl: 'form-layout.component.html',
  styleUrl: 'form-layout.component.scss',
  standalone: true,
  encapsulation: ViewEncapsulation.None,
  providers: [{ provide: MAT_FORM_FIELD_DEFAULT_OPTIONS, useValue: { appearance: 'outline' } }],
})
export class FormLayoutComponent implements AfterViewInit {
  cols = 3;
  public constructor(
    private readonly elRef: ElementRef,
    private readonly render: Renderer2,
  ) {
    render.addClass(elRef.nativeElement, 'form-container');
    render.addClass(elRef.nativeElement, 'form-container-cols-' + this.cols);
  }

  ngAfterViewInit() {
    const observer = new ResizeObserver((entries) => {
      for (let entry of entries) {
        this.updateColumns(entry.contentRect.width);
      }
    });
    observer.observe(this.elRef.nativeElement);
  }

  updateColumns(width: number) {
    const oldCols = this.cols;
    if (width > 1200) {
      this.cols = 3;
    } else if (width > 768) {
      this.cols = 2;
    } else {
      this.cols = 1;
    }
    if (oldCols != this.cols) {
      this.render.removeClass(this.elRef.nativeElement, 'form-container-cols-' + oldCols);
      this.render.addClass(this.elRef.nativeElement, 'form-container-cols-' + this.cols);
    }
  }
}
