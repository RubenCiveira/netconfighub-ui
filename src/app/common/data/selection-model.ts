/* @autogenerated */
import { computed, signal } from '@angular/core';

export class SelectionModel<T> {
  private selectedItems = signal<T[]>([]);

  private mapper?: (item: any) => T;

  get selected() {
    return this.selectedItems;
  }

  modelMapper(mapper: (item: any) => T) {
    this.mapper = mapper;
  }

  select(items: any[]) {
    this.selectedItems.set(items.map((row) => (this.mapper ? this.mapper(row) : row)));
  }

  toogle(item: T) {
    const items = this.selectedItems();
    const index = this.itemIndex(item, items);
    if (-1 == index) {
      items.push(item);
    } else {
      items.splice(index, 1);
    }
    this.selectedItems.set(items);
  }

  isSelected(item: T) {
    return -1 != this.itemIndex(item, this.selectedItems());
  }

  clearSelection() {
    this.selectedItems.set([]);
  }

  private itemIndex(item: T, items: T[]) {
    if (this.mapper) {
      return items.indexOf(this.mapper(item));
    } else {
      return items.indexOf(item);
    }
  }
}
