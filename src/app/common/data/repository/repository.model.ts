/* @autogenerated */
import { Signal } from '@angular/core';
import { Observable } from 'rxjs';

export interface Tick<T, F> extends Signal<T | undefined> {
  searching: Signal<boolean>;
  fetch(filter: F): Tick<T, F>;
  reset(): Tick<T, F>;
  subscribe(callback: (value: T | undefined) => void): void;
}
export interface Shift<T, F> extends Signal<T | undefined> {
  searching: Signal<boolean>;
  fetch(filter: F): Shift<T, F>;
  reset(): Shift<T, F>;
  next(): Shift<T, F>;
  subscribe(callback: (value: T[] | undefined) => void): void;
}

/*
export interface Slide<T> extends Observable<T[]>  {
  next(): Slide<T>;
  hastNext(): boolean;
}

export interface Resource<T> extends Signal<T|undefined> {
  dispose(): void;
  replace(item: T): void;
  delete(): void;
}

export interface Slide<T,F> extends Signal<Resource<T>[]>  {
  dispose(): void;
  add(item: Resource<T>): void;
}
*/
