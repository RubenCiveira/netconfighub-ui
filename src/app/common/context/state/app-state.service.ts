/* @autogenerated */
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, tap } from 'rxjs';
import { UserInfo } from '../identity/user-info.model';

export interface AppStateItem<T> extends Observable<T> {
  set: (value: T) => void;
}

@Injectable({
  providedIn: 'root',
})
export class AppStateService {
  public readonly language = buildWritableSignal<string>('selected-language', 'es', true);
  public readonly tenant = buildWritableSignal<string>('selected-tenant', 'main', true);
  public readonly userInfo = new ArrayOfSignals<UserInfo>('user-info-', {}, false);
}

const stateMap = {} as any;

window.addEventListener('state-item', (event) => {
  const key = (event as any).detail.key;
  const value = (event as any).detail.value;
  if (stateMap[key]?.item) {
    stateMap[key].item.set(value);
  } else {
    stateMap[key] = { value: value };
  }
});

function buildWritableSignal<T>(name: string, def: T, persistent: boolean): AppStateItem<T> {
  const stateName = 'state-item-' + name;
  if (persistent) {
    let stored = localStorage.getItem(stateName);
    def = stored ? JSON.parse(stored).data || def : def;
  }
  const base = new BehaviorSubject<T>(def);
  const instance = base as any;
  instance.set = (value: T) => {
    // let currentValue: T = base.value;
    const current = JSON.stringify(base.value);
    const next = JSON.stringify(value);
    if (next !== current) {
      base.next(value);
      window.dispatchEvent(
        new CustomEvent('state-item', {
          detail: { key: stateName, value: value },
        }),
      );
      if (persistent) {
        localStorage.setItem(stateName, JSON.stringify({ data: value }));
      }
    }
  };
  if (stateMap[stateName] && stateMap[stateName].item) {
    console.error('The build state already was inspected');
  } else if (stateMap[stateName]) {
    base.next(stateMap[stateName].value);
    stateMap[stateName].item = base;
  } else {
    stateMap[stateName] = { item: instance, value: def };
  }
  return instance;
}

export class ArrayOfSignals<T> {
  [key: string]: AppStateItem<T>;

  private map: any = {};

  public constructor(preffix: string, def: T, persistable: boolean) {
    return new Proxy(this, {
      get: (target, prop) => {
        if (!target.map[prop]) {
          target.map[prop] = buildWritableSignal<T>(preffix + (prop as string), def, persistable);
        }
        return target.map[prop];
      },
    });
  }
}
