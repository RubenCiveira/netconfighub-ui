/* @autogenerated */
import { Injectable } from '@angular/core';
import { NavigationCancel, NavigationEnd, ResolveEnd, ResolveStart, Router } from '@angular/router';
import { filter } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class AuthorizationAccessService {
  private readonly storageKey = 'last-non-oidc-route';

  constructor(private router: Router) {
    this.router.events
      .pipe(
        filter(
          (event) =>
            event instanceof NavigationEnd ||
            event instanceof NavigationCancel ||
            event instanceof ResolveEnd ||
            event instanceof ResolveStart,
        ),
      )
      .subscribe((event: any) => {
        if (!this.isAuthRoute(event.url)) {
          localStorage.setItem(this.storageKey, event.urlAfterRedirects || event.url);
        }
      });
  }

  isAuthRoute(url: string) {
    let is = false;
    this.authorizationRoutes().forEach((route) => {
      if (url.startsWith(route) || url == route) {
        is = true;
      }
    });
    return is;
  }

  authorizationRoutes(): string[] {
    return ['/login-redirect', '/unauthorized'];
  }

  getLastRoute(): string | null {
    return localStorage.getItem(this.storageKey);
  }

  loadLastRoute() {
    const last = this.getLastRoute();
    if (last) {
      this.router.navigateByUrl(last);
    } else {
      this.router.navigate(['en-EN', 'main']);
    }
  }

  clear(): void {
    localStorage.removeItem(this.storageKey);
  }
}
