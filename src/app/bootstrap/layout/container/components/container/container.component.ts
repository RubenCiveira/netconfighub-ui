/* @autogenerated */
import { CommonModule } from '@angular/common';
import { Component, effect, OnDestroy, OnInit, signal, Signal } from '@angular/core';
import { toSignal } from '@angular/core/rxjs-interop';
import { ActivatedRoute, ActivatedRouteSnapshot, NavigationEnd, Router, RouterModule } from '@angular/router';
import { AppStateService } from '@common/context/state/app-state.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-container',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './container.component.html',
  styleUrl: './container.component.scss',
})
export class ContainerComponent implements OnInit, OnDestroy {
  currentLanguage: Signal<string | undefined>;
  currentTenant: Signal<string | undefined>;

  private susbcription = new Subscription();

  constructor(
    private readonly router: Router,
    private readonly route: ActivatedRoute,
    private readonly state: AppStateService,
  ) {
    this.currentLanguage = toSignal(this.state.language);
    this.currentTenant = toSignal(this.state.tenant);
    effect(() => {
      this.updateLanguageInUrl(this.currentLanguage() || 'es');
    });
    effect(() => {
      this.updateTenantInUrl(this.currentTenant() || 'main');
    });
  }

  ngOnDestroy(): void {
    this.susbcription.unsubscribe();
  }

  ngOnInit(): void {
    this.susbcription.add(
      this.route.params.subscribe((params) => {
        const lang = params['language'];
        const ten = params['tenant'];
        if (lang != this.currentLanguage()) {
          this.state.language.set(lang);
        }
        if (ten != this.currentTenant()) {
          this.state.tenant.set(ten);
        }
      }),
    );
  }

  private updateTenantInUrl(newTenant: string): void {
    this.updateInUrl(newTenant, 1);
  }

  // Actualiza el idioma en la URL
  private updateLanguageInUrl(newLanguage: string): void {
    this.updateInUrl(newLanguage, 0);
  }

  private updateInUrl(newVar: string, index: number): void {
    const fullUrlSegments = this.getFullUrlSegments(this.route.snapshot);
    if (fullUrlSegments[index] != newVar) {
      fullUrlSegments[index] = newVar;
      this.router.navigate(fullUrlSegments, {
        queryParamsHandling: 'merge', // Mantener los query params actuales
        relativeTo: this.route.root,
      });
    }
  }

  private getFullUrlSegments(route: ActivatedRouteSnapshot): string[] {
    let segments: string[] = [];
    // Agregar los segmentos de la ruta actual
    segments = segments.concat(route.url.map((segment) => segment.path));
    // Si la ruta tiene hijos, recorrerlos recursivamente
    if (route.firstChild) {
      segments = segments.concat(this.getFullUrlSegments(route.firstChild));
    }
    return segments;
  }
}
