/* @autogenerated */
import { TestBed } from '@angular/core/testing';
import { InjectionToken } from '@angular/core';
import { Router } from '@angular/router';
import { provideTransloco, TRANSLOCO_CONFIG, TranslocoService } from '@jsverse/transloco';
import { HttpClient } from '@angular/common/http';
import { appConfig } from './app.config';

export const STATIC_CONF = new InjectionToken<string>('STATIC_CONF');

// Mock de I18nLoaderService
class MockI18nLoaderService {
  getTranslation = jasmine.createSpy('getTranslation').and.returnValue(Promise.resolve({}));
}

// Mock de configuración estática
const MOCK_STATIC_CONF = {
  i18n: {
    availableLangs: ['en', 'es'],
    defaultLang: 'en',
    reRenderOnLangChange: true,
    prodMode: false,
  },
};

// Función mock para `provideI18nConfiguration()`
function mockProvideI18nConfiguration() {
  return [
    {
      provide: TRANSLOCO_CONFIG,
      useFactory: () => MOCK_STATIC_CONF.i18n, // Usamos el mock directamente
    },
  ];
}

describe('Application Config', () => {
  beforeEach(() => {
    TestBed.configureTestingModule({
      providers: [
        ...appConfig.providers,
        provideTransloco({
          config: MOCK_STATIC_CONF.i18n, // Se usa el mock directamente
          loader: MockI18nLoaderService,
        }),
      ],
    });
    TestBed.overrideProvider(STATIC_CONF, { useValue: MOCK_STATIC_CONF });

    // Sobrescribir el provider de TRANSLOCO_CONFIG con la configuración mockeada
    TestBed.overrideProvider(TRANSLOCO_CONFIG, {
      useFactory: () => MOCK_STATIC_CONF.i18n,
    });
  });

  it('should provide a valid application config', () => {
    expect(appConfig).toBeDefined();
    expect(appConfig.providers).toBeDefined();
    expect(Array.isArray(appConfig.providers)).toBeTrue();
  });

  it('should provide Transloco configuration', () => {
    const transloco = TestBed.inject(TranslocoService); // Intenta inyectar Router
    expect(transloco).toBeTruthy(); // Asegura que el provider está registrado
  });

  it('should include router providers', () => {
    const router = TestBed.inject(Router); // Intenta inyectar Router
    expect(router).toBeTruthy(); // Asegura que el provider está registrado
  });

  it('should provide HTTP client', () => {
    const client = TestBed.inject(HttpClient); // Intenta inyectar Router
    expect(client).toBeTruthy(); // Asegura que el provider está registrado
  });
});
